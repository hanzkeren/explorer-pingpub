{
  "version": 3,
  "sources": ["../../@confio/ics23/build/generated/codecimpl.js", "../../@confio/ics23/src/compress.ts", "../../@confio/ics23/src/ops.ts", "../../@confio/ics23/src/specs.ts", "../../@confio/ics23/src/proofs.ts", "../../@confio/ics23/src/ics23.ts", "../../@confio/ics23/src/index.ts", "../../symbol-observable/lib/ponyfill.js", "../../symbol-observable/ponyfill.js", "../../object-keys/isArguments.js", "../../object-keys/implementation.js", "../../object-keys/index.js", "../../es-define-property/index.js", "../../es-errors/syntax.js", "../../es-errors/type.js", "../../has-symbols/shams.js", "../../has-symbols/index.js", "../../has-proto/index.js", "../../function-bind/implementation.js", "../../function-bind/index.js", "../../has/src/index.js", "../../get-intrinsic/index.js", "../../gopd/index.js", "../../define-data-property/index.js", "../../has-property-descriptors/index.js", "../../globalthis/node_modules/define-properties/index.js", "../../globalthis/implementation.browser.js", "../../globalthis/polyfill.js", "../../globalthis/shim.js", "../../globalthis/index.js", "../../xstream/src/index.ts", "../../isomorphic-ws/browser.js"],
  "sourcesContent": ["/*eslint-disable block-scoped-var, id-length, no-control-regex, no-magic-numbers, no-prototype-builtins, no-redeclare, no-shadow, no-var, sort-vars*/\n\"use strict\";\n\nvar $protobuf = require(\"protobufjs/minimal\");\n\n// Common aliases\nvar $Reader = $protobuf.Reader, $Writer = $protobuf.Writer, $util = $protobuf.util;\n\n// Exported root namespace\nvar $root = $protobuf.roots[\"default\"] || ($protobuf.roots[\"default\"] = {});\n\n$root.ics23 = (function() {\n\n    /**\n     * Namespace ics23.\n     * @exports ics23\n     * @namespace\n     */\n    var ics23 = {};\n\n    /**\n     * HashOp enum.\n     * @name ics23.HashOp\n     * @enum {string}\n     * @property {number} NO_HASH=0 NO_HASH value\n     * @property {number} SHA256=1 SHA256 value\n     * @property {number} SHA512=2 SHA512 value\n     * @property {number} KECCAK=3 KECCAK value\n     * @property {number} RIPEMD160=4 RIPEMD160 value\n     * @property {number} BITCOIN=5 BITCOIN value\n     * @property {number} SHA512_256=6 SHA512_256 value\n     */\n    ics23.HashOp = (function() {\n        var valuesById = {}, values = Object.create(valuesById);\n        values[valuesById[0] = \"NO_HASH\"] = 0;\n        values[valuesById[1] = \"SHA256\"] = 1;\n        values[valuesById[2] = \"SHA512\"] = 2;\n        values[valuesById[3] = \"KECCAK\"] = 3;\n        values[valuesById[4] = \"RIPEMD160\"] = 4;\n        values[valuesById[5] = \"BITCOIN\"] = 5;\n        values[valuesById[6] = \"SHA512_256\"] = 6;\n        return values;\n    })();\n\n    /**\n     * LengthOp defines how to process the key and value of the LeafOp\n     * to include length information. After encoding the length with the given\n     * algorithm, the length will be prepended to the key and value bytes.\n     * (Each one with it's own encoded length)\n     * @name ics23.LengthOp\n     * @enum {string}\n     * @property {number} NO_PREFIX=0 NO_PREFIX value\n     * @property {number} VAR_PROTO=1 VAR_PROTO value\n     * @property {number} VAR_RLP=2 VAR_RLP value\n     * @property {number} FIXED32_BIG=3 FIXED32_BIG value\n     * @property {number} FIXED32_LITTLE=4 FIXED32_LITTLE value\n     * @property {number} FIXED64_BIG=5 FIXED64_BIG value\n     * @property {number} FIXED64_LITTLE=6 FIXED64_LITTLE value\n     * @property {number} REQUIRE_32_BYTES=7 REQUIRE_32_BYTES value\n     * @property {number} REQUIRE_64_BYTES=8 REQUIRE_64_BYTES value\n     */\n    ics23.LengthOp = (function() {\n        var valuesById = {}, values = Object.create(valuesById);\n        values[valuesById[0] = \"NO_PREFIX\"] = 0;\n        values[valuesById[1] = \"VAR_PROTO\"] = 1;\n        values[valuesById[2] = \"VAR_RLP\"] = 2;\n        values[valuesById[3] = \"FIXED32_BIG\"] = 3;\n        values[valuesById[4] = \"FIXED32_LITTLE\"] = 4;\n        values[valuesById[5] = \"FIXED64_BIG\"] = 5;\n        values[valuesById[6] = \"FIXED64_LITTLE\"] = 6;\n        values[valuesById[7] = \"REQUIRE_32_BYTES\"] = 7;\n        values[valuesById[8] = \"REQUIRE_64_BYTES\"] = 8;\n        return values;\n    })();\n\n    ics23.ExistenceProof = (function() {\n\n        /**\n         * Properties of an ExistenceProof.\n         * @memberof ics23\n         * @interface IExistenceProof\n         * @property {Uint8Array|null} [key] ExistenceProof key\n         * @property {Uint8Array|null} [value] ExistenceProof value\n         * @property {ics23.ILeafOp|null} [leaf] ExistenceProof leaf\n         * @property {Array.<ics23.IInnerOp>|null} [path] ExistenceProof path\n         */\n\n        /**\n         * Constructs a new ExistenceProof.\n         * @memberof ics23\n         * @classdesc ExistenceProof takes a key and a value and a set of steps to perform on it.\n         * The result of peforming all these steps will provide a \"root hash\", which can\n         * be compared to the value in a header.\n         * \n         * Since it is computationally infeasible to produce a hash collission for any of the used\n         * cryptographic hash functions, if someone can provide a series of operations to transform\n         * a given key and value into a root hash that matches some trusted root, these key and values\n         * must be in the referenced merkle tree.\n         * \n         * The only possible issue is maliablity in LeafOp, such as providing extra prefix data,\n         * which should be controlled by a spec. Eg. with lengthOp as NONE,\n         * prefix = FOO, key = BAR, value = CHOICE\n         * and\n         * prefix = F, key = OOBAR, value = CHOICE\n         * would produce the same value.\n         * \n         * With LengthOp this is tricker but not impossible. Which is why the \"leafPrefixEqual\" field\n         * in the ProofSpec is valuable to prevent this mutability. And why all trees should\n         * length-prefix the data before hashing it.\n         * @implements IExistenceProof\n         * @constructor\n         * @param {ics23.IExistenceProof=} [properties] Properties to set\n         */\n        function ExistenceProof(properties) {\n            this.path = [];\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * ExistenceProof key.\n         * @member {Uint8Array} key\n         * @memberof ics23.ExistenceProof\n         * @instance\n         */\n        ExistenceProof.prototype.key = $util.newBuffer([]);\n\n        /**\n         * ExistenceProof value.\n         * @member {Uint8Array} value\n         * @memberof ics23.ExistenceProof\n         * @instance\n         */\n        ExistenceProof.prototype.value = $util.newBuffer([]);\n\n        /**\n         * ExistenceProof leaf.\n         * @member {ics23.ILeafOp|null|undefined} leaf\n         * @memberof ics23.ExistenceProof\n         * @instance\n         */\n        ExistenceProof.prototype.leaf = null;\n\n        /**\n         * ExistenceProof path.\n         * @member {Array.<ics23.IInnerOp>} path\n         * @memberof ics23.ExistenceProof\n         * @instance\n         */\n        ExistenceProof.prototype.path = $util.emptyArray;\n\n        /**\n         * Creates a new ExistenceProof instance using the specified properties.\n         * @function create\n         * @memberof ics23.ExistenceProof\n         * @static\n         * @param {ics23.IExistenceProof=} [properties] Properties to set\n         * @returns {ics23.ExistenceProof} ExistenceProof instance\n         */\n        ExistenceProof.create = function create(properties) {\n            return new ExistenceProof(properties);\n        };\n\n        /**\n         * Encodes the specified ExistenceProof message. Does not implicitly {@link ics23.ExistenceProof.verify|verify} messages.\n         * @function encode\n         * @memberof ics23.ExistenceProof\n         * @static\n         * @param {ics23.IExistenceProof} message ExistenceProof message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        ExistenceProof.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.key != null && message.hasOwnProperty(\"key\"))\n                writer.uint32(/* id 1, wireType 2 =*/10).bytes(message.key);\n            if (message.value != null && message.hasOwnProperty(\"value\"))\n                writer.uint32(/* id 2, wireType 2 =*/18).bytes(message.value);\n            if (message.leaf != null && message.hasOwnProperty(\"leaf\"))\n                $root.ics23.LeafOp.encode(message.leaf, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();\n            if (message.path != null && message.path.length)\n                for (var i = 0; i < message.path.length; ++i)\n                    $root.ics23.InnerOp.encode(message.path[i], writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();\n            return writer;\n        };\n\n        /**\n         * Encodes the specified ExistenceProof message, length delimited. Does not implicitly {@link ics23.ExistenceProof.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof ics23.ExistenceProof\n         * @static\n         * @param {ics23.IExistenceProof} message ExistenceProof message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        ExistenceProof.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes an ExistenceProof message from the specified reader or buffer.\n         * @function decode\n         * @memberof ics23.ExistenceProof\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {ics23.ExistenceProof} ExistenceProof\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        ExistenceProof.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ics23.ExistenceProof();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    message.key = reader.bytes();\n                    break;\n                case 2:\n                    message.value = reader.bytes();\n                    break;\n                case 3:\n                    message.leaf = $root.ics23.LeafOp.decode(reader, reader.uint32());\n                    break;\n                case 4:\n                    if (!(message.path && message.path.length))\n                        message.path = [];\n                    message.path.push($root.ics23.InnerOp.decode(reader, reader.uint32()));\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes an ExistenceProof message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof ics23.ExistenceProof\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {ics23.ExistenceProof} ExistenceProof\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        ExistenceProof.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies an ExistenceProof message.\n         * @function verify\n         * @memberof ics23.ExistenceProof\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        ExistenceProof.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.key != null && message.hasOwnProperty(\"key\"))\n                if (!(message.key && typeof message.key.length === \"number\" || $util.isString(message.key)))\n                    return \"key: buffer expected\";\n            if (message.value != null && message.hasOwnProperty(\"value\"))\n                if (!(message.value && typeof message.value.length === \"number\" || $util.isString(message.value)))\n                    return \"value: buffer expected\";\n            if (message.leaf != null && message.hasOwnProperty(\"leaf\")) {\n                var error = $root.ics23.LeafOp.verify(message.leaf);\n                if (error)\n                    return \"leaf.\" + error;\n            }\n            if (message.path != null && message.hasOwnProperty(\"path\")) {\n                if (!Array.isArray(message.path))\n                    return \"path: array expected\";\n                for (var i = 0; i < message.path.length; ++i) {\n                    var error = $root.ics23.InnerOp.verify(message.path[i]);\n                    if (error)\n                        return \"path.\" + error;\n                }\n            }\n            return null;\n        };\n\n        /**\n         * Creates an ExistenceProof message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof ics23.ExistenceProof\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {ics23.ExistenceProof} ExistenceProof\n         */\n        ExistenceProof.fromObject = function fromObject(object) {\n            if (object instanceof $root.ics23.ExistenceProof)\n                return object;\n            var message = new $root.ics23.ExistenceProof();\n            if (object.key != null)\n                if (typeof object.key === \"string\")\n                    $util.base64.decode(object.key, message.key = $util.newBuffer($util.base64.length(object.key)), 0);\n                else if (object.key.length)\n                    message.key = object.key;\n            if (object.value != null)\n                if (typeof object.value === \"string\")\n                    $util.base64.decode(object.value, message.value = $util.newBuffer($util.base64.length(object.value)), 0);\n                else if (object.value.length)\n                    message.value = object.value;\n            if (object.leaf != null) {\n                if (typeof object.leaf !== \"object\")\n                    throw TypeError(\".ics23.ExistenceProof.leaf: object expected\");\n                message.leaf = $root.ics23.LeafOp.fromObject(object.leaf);\n            }\n            if (object.path) {\n                if (!Array.isArray(object.path))\n                    throw TypeError(\".ics23.ExistenceProof.path: array expected\");\n                message.path = [];\n                for (var i = 0; i < object.path.length; ++i) {\n                    if (typeof object.path[i] !== \"object\")\n                        throw TypeError(\".ics23.ExistenceProof.path: object expected\");\n                    message.path[i] = $root.ics23.InnerOp.fromObject(object.path[i]);\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Creates a plain object from an ExistenceProof message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof ics23.ExistenceProof\n         * @static\n         * @param {ics23.ExistenceProof} message ExistenceProof\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        ExistenceProof.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.arrays || options.defaults)\n                object.path = [];\n            if (options.defaults) {\n                if (options.bytes === String)\n                    object.key = \"\";\n                else {\n                    object.key = [];\n                    if (options.bytes !== Array)\n                        object.key = $util.newBuffer(object.key);\n                }\n                if (options.bytes === String)\n                    object.value = \"\";\n                else {\n                    object.value = [];\n                    if (options.bytes !== Array)\n                        object.value = $util.newBuffer(object.value);\n                }\n                object.leaf = null;\n            }\n            if (message.key != null && message.hasOwnProperty(\"key\"))\n                object.key = options.bytes === String ? $util.base64.encode(message.key, 0, message.key.length) : options.bytes === Array ? Array.prototype.slice.call(message.key) : message.key;\n            if (message.value != null && message.hasOwnProperty(\"value\"))\n                object.value = options.bytes === String ? $util.base64.encode(message.value, 0, message.value.length) : options.bytes === Array ? Array.prototype.slice.call(message.value) : message.value;\n            if (message.leaf != null && message.hasOwnProperty(\"leaf\"))\n                object.leaf = $root.ics23.LeafOp.toObject(message.leaf, options);\n            if (message.path && message.path.length) {\n                object.path = [];\n                for (var j = 0; j < message.path.length; ++j)\n                    object.path[j] = $root.ics23.InnerOp.toObject(message.path[j], options);\n            }\n            return object;\n        };\n\n        /**\n         * Converts this ExistenceProof to JSON.\n         * @function toJSON\n         * @memberof ics23.ExistenceProof\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        ExistenceProof.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        return ExistenceProof;\n    })();\n\n    ics23.NonExistenceProof = (function() {\n\n        /**\n         * Properties of a NonExistenceProof.\n         * @memberof ics23\n         * @interface INonExistenceProof\n         * @property {Uint8Array|null} [key] NonExistenceProof key\n         * @property {ics23.IExistenceProof|null} [left] NonExistenceProof left\n         * @property {ics23.IExistenceProof|null} [right] NonExistenceProof right\n         */\n\n        /**\n         * Constructs a new NonExistenceProof.\n         * @memberof ics23\n         * @classdesc Represents a NonExistenceProof.\n         * @implements INonExistenceProof\n         * @constructor\n         * @param {ics23.INonExistenceProof=} [properties] Properties to set\n         */\n        function NonExistenceProof(properties) {\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * NonExistenceProof key.\n         * @member {Uint8Array} key\n         * @memberof ics23.NonExistenceProof\n         * @instance\n         */\n        NonExistenceProof.prototype.key = $util.newBuffer([]);\n\n        /**\n         * NonExistenceProof left.\n         * @member {ics23.IExistenceProof|null|undefined} left\n         * @memberof ics23.NonExistenceProof\n         * @instance\n         */\n        NonExistenceProof.prototype.left = null;\n\n        /**\n         * NonExistenceProof right.\n         * @member {ics23.IExistenceProof|null|undefined} right\n         * @memberof ics23.NonExistenceProof\n         * @instance\n         */\n        NonExistenceProof.prototype.right = null;\n\n        /**\n         * Creates a new NonExistenceProof instance using the specified properties.\n         * @function create\n         * @memberof ics23.NonExistenceProof\n         * @static\n         * @param {ics23.INonExistenceProof=} [properties] Properties to set\n         * @returns {ics23.NonExistenceProof} NonExistenceProof instance\n         */\n        NonExistenceProof.create = function create(properties) {\n            return new NonExistenceProof(properties);\n        };\n\n        /**\n         * Encodes the specified NonExistenceProof message. Does not implicitly {@link ics23.NonExistenceProof.verify|verify} messages.\n         * @function encode\n         * @memberof ics23.NonExistenceProof\n         * @static\n         * @param {ics23.INonExistenceProof} message NonExistenceProof message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        NonExistenceProof.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.key != null && message.hasOwnProperty(\"key\"))\n                writer.uint32(/* id 1, wireType 2 =*/10).bytes(message.key);\n            if (message.left != null && message.hasOwnProperty(\"left\"))\n                $root.ics23.ExistenceProof.encode(message.left, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();\n            if (message.right != null && message.hasOwnProperty(\"right\"))\n                $root.ics23.ExistenceProof.encode(message.right, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();\n            return writer;\n        };\n\n        /**\n         * Encodes the specified NonExistenceProof message, length delimited. Does not implicitly {@link ics23.NonExistenceProof.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof ics23.NonExistenceProof\n         * @static\n         * @param {ics23.INonExistenceProof} message NonExistenceProof message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        NonExistenceProof.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a NonExistenceProof message from the specified reader or buffer.\n         * @function decode\n         * @memberof ics23.NonExistenceProof\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {ics23.NonExistenceProof} NonExistenceProof\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        NonExistenceProof.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ics23.NonExistenceProof();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    message.key = reader.bytes();\n                    break;\n                case 2:\n                    message.left = $root.ics23.ExistenceProof.decode(reader, reader.uint32());\n                    break;\n                case 3:\n                    message.right = $root.ics23.ExistenceProof.decode(reader, reader.uint32());\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a NonExistenceProof message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof ics23.NonExistenceProof\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {ics23.NonExistenceProof} NonExistenceProof\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        NonExistenceProof.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a NonExistenceProof message.\n         * @function verify\n         * @memberof ics23.NonExistenceProof\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        NonExistenceProof.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.key != null && message.hasOwnProperty(\"key\"))\n                if (!(message.key && typeof message.key.length === \"number\" || $util.isString(message.key)))\n                    return \"key: buffer expected\";\n            if (message.left != null && message.hasOwnProperty(\"left\")) {\n                var error = $root.ics23.ExistenceProof.verify(message.left);\n                if (error)\n                    return \"left.\" + error;\n            }\n            if (message.right != null && message.hasOwnProperty(\"right\")) {\n                var error = $root.ics23.ExistenceProof.verify(message.right);\n                if (error)\n                    return \"right.\" + error;\n            }\n            return null;\n        };\n\n        /**\n         * Creates a NonExistenceProof message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof ics23.NonExistenceProof\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {ics23.NonExistenceProof} NonExistenceProof\n         */\n        NonExistenceProof.fromObject = function fromObject(object) {\n            if (object instanceof $root.ics23.NonExistenceProof)\n                return object;\n            var message = new $root.ics23.NonExistenceProof();\n            if (object.key != null)\n                if (typeof object.key === \"string\")\n                    $util.base64.decode(object.key, message.key = $util.newBuffer($util.base64.length(object.key)), 0);\n                else if (object.key.length)\n                    message.key = object.key;\n            if (object.left != null) {\n                if (typeof object.left !== \"object\")\n                    throw TypeError(\".ics23.NonExistenceProof.left: object expected\");\n                message.left = $root.ics23.ExistenceProof.fromObject(object.left);\n            }\n            if (object.right != null) {\n                if (typeof object.right !== \"object\")\n                    throw TypeError(\".ics23.NonExistenceProof.right: object expected\");\n                message.right = $root.ics23.ExistenceProof.fromObject(object.right);\n            }\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a NonExistenceProof message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof ics23.NonExistenceProof\n         * @static\n         * @param {ics23.NonExistenceProof} message NonExistenceProof\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        NonExistenceProof.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.defaults) {\n                if (options.bytes === String)\n                    object.key = \"\";\n                else {\n                    object.key = [];\n                    if (options.bytes !== Array)\n                        object.key = $util.newBuffer(object.key);\n                }\n                object.left = null;\n                object.right = null;\n            }\n            if (message.key != null && message.hasOwnProperty(\"key\"))\n                object.key = options.bytes === String ? $util.base64.encode(message.key, 0, message.key.length) : options.bytes === Array ? Array.prototype.slice.call(message.key) : message.key;\n            if (message.left != null && message.hasOwnProperty(\"left\"))\n                object.left = $root.ics23.ExistenceProof.toObject(message.left, options);\n            if (message.right != null && message.hasOwnProperty(\"right\"))\n                object.right = $root.ics23.ExistenceProof.toObject(message.right, options);\n            return object;\n        };\n\n        /**\n         * Converts this NonExistenceProof to JSON.\n         * @function toJSON\n         * @memberof ics23.NonExistenceProof\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        NonExistenceProof.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        return NonExistenceProof;\n    })();\n\n    ics23.CommitmentProof = (function() {\n\n        /**\n         * Properties of a CommitmentProof.\n         * @memberof ics23\n         * @interface ICommitmentProof\n         * @property {ics23.IExistenceProof|null} [exist] CommitmentProof exist\n         * @property {ics23.INonExistenceProof|null} [nonexist] CommitmentProof nonexist\n         * @property {ics23.IBatchProof|null} [batch] CommitmentProof batch\n         * @property {ics23.ICompressedBatchProof|null} [compressed] CommitmentProof compressed\n         */\n\n        /**\n         * Constructs a new CommitmentProof.\n         * @memberof ics23\n         * @classdesc Represents a CommitmentProof.\n         * @implements ICommitmentProof\n         * @constructor\n         * @param {ics23.ICommitmentProof=} [properties] Properties to set\n         */\n        function CommitmentProof(properties) {\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * CommitmentProof exist.\n         * @member {ics23.IExistenceProof|null|undefined} exist\n         * @memberof ics23.CommitmentProof\n         * @instance\n         */\n        CommitmentProof.prototype.exist = null;\n\n        /**\n         * CommitmentProof nonexist.\n         * @member {ics23.INonExistenceProof|null|undefined} nonexist\n         * @memberof ics23.CommitmentProof\n         * @instance\n         */\n        CommitmentProof.prototype.nonexist = null;\n\n        /**\n         * CommitmentProof batch.\n         * @member {ics23.IBatchProof|null|undefined} batch\n         * @memberof ics23.CommitmentProof\n         * @instance\n         */\n        CommitmentProof.prototype.batch = null;\n\n        /**\n         * CommitmentProof compressed.\n         * @member {ics23.ICompressedBatchProof|null|undefined} compressed\n         * @memberof ics23.CommitmentProof\n         * @instance\n         */\n        CommitmentProof.prototype.compressed = null;\n\n        // OneOf field names bound to virtual getters and setters\n        var $oneOfFields;\n\n        /**\n         * CommitmentProof proof.\n         * @member {\"exist\"|\"nonexist\"|\"batch\"|\"compressed\"|undefined} proof\n         * @memberof ics23.CommitmentProof\n         * @instance\n         */\n        Object.defineProperty(CommitmentProof.prototype, \"proof\", {\n            get: $util.oneOfGetter($oneOfFields = [\"exist\", \"nonexist\", \"batch\", \"compressed\"]),\n            set: $util.oneOfSetter($oneOfFields)\n        });\n\n        /**\n         * Creates a new CommitmentProof instance using the specified properties.\n         * @function create\n         * @memberof ics23.CommitmentProof\n         * @static\n         * @param {ics23.ICommitmentProof=} [properties] Properties to set\n         * @returns {ics23.CommitmentProof} CommitmentProof instance\n         */\n        CommitmentProof.create = function create(properties) {\n            return new CommitmentProof(properties);\n        };\n\n        /**\n         * Encodes the specified CommitmentProof message. Does not implicitly {@link ics23.CommitmentProof.verify|verify} messages.\n         * @function encode\n         * @memberof ics23.CommitmentProof\n         * @static\n         * @param {ics23.ICommitmentProof} message CommitmentProof message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        CommitmentProof.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.exist != null && message.hasOwnProperty(\"exist\"))\n                $root.ics23.ExistenceProof.encode(message.exist, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n            if (message.nonexist != null && message.hasOwnProperty(\"nonexist\"))\n                $root.ics23.NonExistenceProof.encode(message.nonexist, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();\n            if (message.batch != null && message.hasOwnProperty(\"batch\"))\n                $root.ics23.BatchProof.encode(message.batch, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();\n            if (message.compressed != null && message.hasOwnProperty(\"compressed\"))\n                $root.ics23.CompressedBatchProof.encode(message.compressed, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();\n            return writer;\n        };\n\n        /**\n         * Encodes the specified CommitmentProof message, length delimited. Does not implicitly {@link ics23.CommitmentProof.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof ics23.CommitmentProof\n         * @static\n         * @param {ics23.ICommitmentProof} message CommitmentProof message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        CommitmentProof.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a CommitmentProof message from the specified reader or buffer.\n         * @function decode\n         * @memberof ics23.CommitmentProof\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {ics23.CommitmentProof} CommitmentProof\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        CommitmentProof.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ics23.CommitmentProof();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    message.exist = $root.ics23.ExistenceProof.decode(reader, reader.uint32());\n                    break;\n                case 2:\n                    message.nonexist = $root.ics23.NonExistenceProof.decode(reader, reader.uint32());\n                    break;\n                case 3:\n                    message.batch = $root.ics23.BatchProof.decode(reader, reader.uint32());\n                    break;\n                case 4:\n                    message.compressed = $root.ics23.CompressedBatchProof.decode(reader, reader.uint32());\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a CommitmentProof message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof ics23.CommitmentProof\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {ics23.CommitmentProof} CommitmentProof\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        CommitmentProof.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a CommitmentProof message.\n         * @function verify\n         * @memberof ics23.CommitmentProof\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        CommitmentProof.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            var properties = {};\n            if (message.exist != null && message.hasOwnProperty(\"exist\")) {\n                properties.proof = 1;\n                {\n                    var error = $root.ics23.ExistenceProof.verify(message.exist);\n                    if (error)\n                        return \"exist.\" + error;\n                }\n            }\n            if (message.nonexist != null && message.hasOwnProperty(\"nonexist\")) {\n                if (properties.proof === 1)\n                    return \"proof: multiple values\";\n                properties.proof = 1;\n                {\n                    var error = $root.ics23.NonExistenceProof.verify(message.nonexist);\n                    if (error)\n                        return \"nonexist.\" + error;\n                }\n            }\n            if (message.batch != null && message.hasOwnProperty(\"batch\")) {\n                if (properties.proof === 1)\n                    return \"proof: multiple values\";\n                properties.proof = 1;\n                {\n                    var error = $root.ics23.BatchProof.verify(message.batch);\n                    if (error)\n                        return \"batch.\" + error;\n                }\n            }\n            if (message.compressed != null && message.hasOwnProperty(\"compressed\")) {\n                if (properties.proof === 1)\n                    return \"proof: multiple values\";\n                properties.proof = 1;\n                {\n                    var error = $root.ics23.CompressedBatchProof.verify(message.compressed);\n                    if (error)\n                        return \"compressed.\" + error;\n                }\n            }\n            return null;\n        };\n\n        /**\n         * Creates a CommitmentProof message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof ics23.CommitmentProof\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {ics23.CommitmentProof} CommitmentProof\n         */\n        CommitmentProof.fromObject = function fromObject(object) {\n            if (object instanceof $root.ics23.CommitmentProof)\n                return object;\n            var message = new $root.ics23.CommitmentProof();\n            if (object.exist != null) {\n                if (typeof object.exist !== \"object\")\n                    throw TypeError(\".ics23.CommitmentProof.exist: object expected\");\n                message.exist = $root.ics23.ExistenceProof.fromObject(object.exist);\n            }\n            if (object.nonexist != null) {\n                if (typeof object.nonexist !== \"object\")\n                    throw TypeError(\".ics23.CommitmentProof.nonexist: object expected\");\n                message.nonexist = $root.ics23.NonExistenceProof.fromObject(object.nonexist);\n            }\n            if (object.batch != null) {\n                if (typeof object.batch !== \"object\")\n                    throw TypeError(\".ics23.CommitmentProof.batch: object expected\");\n                message.batch = $root.ics23.BatchProof.fromObject(object.batch);\n            }\n            if (object.compressed != null) {\n                if (typeof object.compressed !== \"object\")\n                    throw TypeError(\".ics23.CommitmentProof.compressed: object expected\");\n                message.compressed = $root.ics23.CompressedBatchProof.fromObject(object.compressed);\n            }\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a CommitmentProof message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof ics23.CommitmentProof\n         * @static\n         * @param {ics23.CommitmentProof} message CommitmentProof\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        CommitmentProof.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (message.exist != null && message.hasOwnProperty(\"exist\")) {\n                object.exist = $root.ics23.ExistenceProof.toObject(message.exist, options);\n                if (options.oneofs)\n                    object.proof = \"exist\";\n            }\n            if (message.nonexist != null && message.hasOwnProperty(\"nonexist\")) {\n                object.nonexist = $root.ics23.NonExistenceProof.toObject(message.nonexist, options);\n                if (options.oneofs)\n                    object.proof = \"nonexist\";\n            }\n            if (message.batch != null && message.hasOwnProperty(\"batch\")) {\n                object.batch = $root.ics23.BatchProof.toObject(message.batch, options);\n                if (options.oneofs)\n                    object.proof = \"batch\";\n            }\n            if (message.compressed != null && message.hasOwnProperty(\"compressed\")) {\n                object.compressed = $root.ics23.CompressedBatchProof.toObject(message.compressed, options);\n                if (options.oneofs)\n                    object.proof = \"compressed\";\n            }\n            return object;\n        };\n\n        /**\n         * Converts this CommitmentProof to JSON.\n         * @function toJSON\n         * @memberof ics23.CommitmentProof\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        CommitmentProof.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        return CommitmentProof;\n    })();\n\n    ics23.LeafOp = (function() {\n\n        /**\n         * Properties of a LeafOp.\n         * @memberof ics23\n         * @interface ILeafOp\n         * @property {ics23.HashOp|null} [hash] LeafOp hash\n         * @property {ics23.HashOp|null} [prehashKey] LeafOp prehashKey\n         * @property {ics23.HashOp|null} [prehashValue] LeafOp prehashValue\n         * @property {ics23.LengthOp|null} [length] LeafOp length\n         * @property {Uint8Array|null} [prefix] LeafOp prefix\n         */\n\n        /**\n         * Constructs a new LeafOp.\n         * @memberof ics23\n         * @classdesc LeafOp represents the raw key-value data we wish to prove, and\n         * must be flexible to represent the internal transformation from\n         * the original key-value pairs into the basis hash, for many existing\n         * merkle trees.\n         * \n         * key and value are passed in. So that the signature of this operation is:\n         * leafOp(key, value) -> output\n         * \n         * To process this, first prehash the keys and values if needed (ANY means no hash in this case):\n         * hkey = prehashKey(key)\n         * hvalue = prehashValue(value)\n         * \n         * Then combine the bytes, and hash it\n         * output = hash(prefix || length(hkey) || hkey || length(hvalue) || hvalue)\n         * @implements ILeafOp\n         * @constructor\n         * @param {ics23.ILeafOp=} [properties] Properties to set\n         */\n        function LeafOp(properties) {\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * LeafOp hash.\n         * @member {ics23.HashOp} hash\n         * @memberof ics23.LeafOp\n         * @instance\n         */\n        LeafOp.prototype.hash = 0;\n\n        /**\n         * LeafOp prehashKey.\n         * @member {ics23.HashOp} prehashKey\n         * @memberof ics23.LeafOp\n         * @instance\n         */\n        LeafOp.prototype.prehashKey = 0;\n\n        /**\n         * LeafOp prehashValue.\n         * @member {ics23.HashOp} prehashValue\n         * @memberof ics23.LeafOp\n         * @instance\n         */\n        LeafOp.prototype.prehashValue = 0;\n\n        /**\n         * LeafOp length.\n         * @member {ics23.LengthOp} length\n         * @memberof ics23.LeafOp\n         * @instance\n         */\n        LeafOp.prototype.length = 0;\n\n        /**\n         * LeafOp prefix.\n         * @member {Uint8Array} prefix\n         * @memberof ics23.LeafOp\n         * @instance\n         */\n        LeafOp.prototype.prefix = $util.newBuffer([]);\n\n        /**\n         * Creates a new LeafOp instance using the specified properties.\n         * @function create\n         * @memberof ics23.LeafOp\n         * @static\n         * @param {ics23.ILeafOp=} [properties] Properties to set\n         * @returns {ics23.LeafOp} LeafOp instance\n         */\n        LeafOp.create = function create(properties) {\n            return new LeafOp(properties);\n        };\n\n        /**\n         * Encodes the specified LeafOp message. Does not implicitly {@link ics23.LeafOp.verify|verify} messages.\n         * @function encode\n         * @memberof ics23.LeafOp\n         * @static\n         * @param {ics23.ILeafOp} message LeafOp message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        LeafOp.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.hash != null && message.hasOwnProperty(\"hash\"))\n                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.hash);\n            if (message.prehashKey != null && message.hasOwnProperty(\"prehashKey\"))\n                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.prehashKey);\n            if (message.prehashValue != null && message.hasOwnProperty(\"prehashValue\"))\n                writer.uint32(/* id 3, wireType 0 =*/24).int32(message.prehashValue);\n            if (message.length != null && message.hasOwnProperty(\"length\"))\n                writer.uint32(/* id 4, wireType 0 =*/32).int32(message.length);\n            if (message.prefix != null && message.hasOwnProperty(\"prefix\"))\n                writer.uint32(/* id 5, wireType 2 =*/42).bytes(message.prefix);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified LeafOp message, length delimited. Does not implicitly {@link ics23.LeafOp.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof ics23.LeafOp\n         * @static\n         * @param {ics23.ILeafOp} message LeafOp message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        LeafOp.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a LeafOp message from the specified reader or buffer.\n         * @function decode\n         * @memberof ics23.LeafOp\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {ics23.LeafOp} LeafOp\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        LeafOp.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ics23.LeafOp();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    message.hash = reader.int32();\n                    break;\n                case 2:\n                    message.prehashKey = reader.int32();\n                    break;\n                case 3:\n                    message.prehashValue = reader.int32();\n                    break;\n                case 4:\n                    message.length = reader.int32();\n                    break;\n                case 5:\n                    message.prefix = reader.bytes();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a LeafOp message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof ics23.LeafOp\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {ics23.LeafOp} LeafOp\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        LeafOp.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a LeafOp message.\n         * @function verify\n         * @memberof ics23.LeafOp\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        LeafOp.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.hash != null && message.hasOwnProperty(\"hash\"))\n                switch (message.hash) {\n                default:\n                    return \"hash: enum value expected\";\n                case 0:\n                case 1:\n                case 2:\n                case 3:\n                case 4:\n                case 5:\n                case 6:\n                    break;\n                }\n            if (message.prehashKey != null && message.hasOwnProperty(\"prehashKey\"))\n                switch (message.prehashKey) {\n                default:\n                    return \"prehashKey: enum value expected\";\n                case 0:\n                case 1:\n                case 2:\n                case 3:\n                case 4:\n                case 5:\n                case 6:\n                    break;\n                }\n            if (message.prehashValue != null && message.hasOwnProperty(\"prehashValue\"))\n                switch (message.prehashValue) {\n                default:\n                    return \"prehashValue: enum value expected\";\n                case 0:\n                case 1:\n                case 2:\n                case 3:\n                case 4:\n                case 5:\n                case 6:\n                    break;\n                }\n            if (message.length != null && message.hasOwnProperty(\"length\"))\n                switch (message.length) {\n                default:\n                    return \"length: enum value expected\";\n                case 0:\n                case 1:\n                case 2:\n                case 3:\n                case 4:\n                case 5:\n                case 6:\n                case 7:\n                case 8:\n                    break;\n                }\n            if (message.prefix != null && message.hasOwnProperty(\"prefix\"))\n                if (!(message.prefix && typeof message.prefix.length === \"number\" || $util.isString(message.prefix)))\n                    return \"prefix: buffer expected\";\n            return null;\n        };\n\n        /**\n         * Creates a LeafOp message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof ics23.LeafOp\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {ics23.LeafOp} LeafOp\n         */\n        LeafOp.fromObject = function fromObject(object) {\n            if (object instanceof $root.ics23.LeafOp)\n                return object;\n            var message = new $root.ics23.LeafOp();\n            switch (object.hash) {\n            case \"NO_HASH\":\n            case 0:\n                message.hash = 0;\n                break;\n            case \"SHA256\":\n            case 1:\n                message.hash = 1;\n                break;\n            case \"SHA512\":\n            case 2:\n                message.hash = 2;\n                break;\n            case \"KECCAK\":\n            case 3:\n                message.hash = 3;\n                break;\n            case \"RIPEMD160\":\n            case 4:\n                message.hash = 4;\n                break;\n            case \"BITCOIN\":\n            case 5:\n                message.hash = 5;\n                break;\n            case \"SHA512_256\":\n            case 6:\n                message.hash = 6;\n                break;\n            }\n            switch (object.prehashKey) {\n            case \"NO_HASH\":\n            case 0:\n                message.prehashKey = 0;\n                break;\n            case \"SHA256\":\n            case 1:\n                message.prehashKey = 1;\n                break;\n            case \"SHA512\":\n            case 2:\n                message.prehashKey = 2;\n                break;\n            case \"KECCAK\":\n            case 3:\n                message.prehashKey = 3;\n                break;\n            case \"RIPEMD160\":\n            case 4:\n                message.prehashKey = 4;\n                break;\n            case \"BITCOIN\":\n            case 5:\n                message.prehashKey = 5;\n                break;\n            case \"SHA512_256\":\n            case 6:\n                message.prehashKey = 6;\n                break;\n            }\n            switch (object.prehashValue) {\n            case \"NO_HASH\":\n            case 0:\n                message.prehashValue = 0;\n                break;\n            case \"SHA256\":\n            case 1:\n                message.prehashValue = 1;\n                break;\n            case \"SHA512\":\n            case 2:\n                message.prehashValue = 2;\n                break;\n            case \"KECCAK\":\n            case 3:\n                message.prehashValue = 3;\n                break;\n            case \"RIPEMD160\":\n            case 4:\n                message.prehashValue = 4;\n                break;\n            case \"BITCOIN\":\n            case 5:\n                message.prehashValue = 5;\n                break;\n            case \"SHA512_256\":\n            case 6:\n                message.prehashValue = 6;\n                break;\n            }\n            switch (object.length) {\n            case \"NO_PREFIX\":\n            case 0:\n                message.length = 0;\n                break;\n            case \"VAR_PROTO\":\n            case 1:\n                message.length = 1;\n                break;\n            case \"VAR_RLP\":\n            case 2:\n                message.length = 2;\n                break;\n            case \"FIXED32_BIG\":\n            case 3:\n                message.length = 3;\n                break;\n            case \"FIXED32_LITTLE\":\n            case 4:\n                message.length = 4;\n                break;\n            case \"FIXED64_BIG\":\n            case 5:\n                message.length = 5;\n                break;\n            case \"FIXED64_LITTLE\":\n            case 6:\n                message.length = 6;\n                break;\n            case \"REQUIRE_32_BYTES\":\n            case 7:\n                message.length = 7;\n                break;\n            case \"REQUIRE_64_BYTES\":\n            case 8:\n                message.length = 8;\n                break;\n            }\n            if (object.prefix != null)\n                if (typeof object.prefix === \"string\")\n                    $util.base64.decode(object.prefix, message.prefix = $util.newBuffer($util.base64.length(object.prefix)), 0);\n                else if (object.prefix.length)\n                    message.prefix = object.prefix;\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a LeafOp message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof ics23.LeafOp\n         * @static\n         * @param {ics23.LeafOp} message LeafOp\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        LeafOp.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.defaults) {\n                object.hash = options.enums === String ? \"NO_HASH\" : 0;\n                object.prehashKey = options.enums === String ? \"NO_HASH\" : 0;\n                object.prehashValue = options.enums === String ? \"NO_HASH\" : 0;\n                object.length = options.enums === String ? \"NO_PREFIX\" : 0;\n                if (options.bytes === String)\n                    object.prefix = \"\";\n                else {\n                    object.prefix = [];\n                    if (options.bytes !== Array)\n                        object.prefix = $util.newBuffer(object.prefix);\n                }\n            }\n            if (message.hash != null && message.hasOwnProperty(\"hash\"))\n                object.hash = options.enums === String ? $root.ics23.HashOp[message.hash] : message.hash;\n            if (message.prehashKey != null && message.hasOwnProperty(\"prehashKey\"))\n                object.prehashKey = options.enums === String ? $root.ics23.HashOp[message.prehashKey] : message.prehashKey;\n            if (message.prehashValue != null && message.hasOwnProperty(\"prehashValue\"))\n                object.prehashValue = options.enums === String ? $root.ics23.HashOp[message.prehashValue] : message.prehashValue;\n            if (message.length != null && message.hasOwnProperty(\"length\"))\n                object.length = options.enums === String ? $root.ics23.LengthOp[message.length] : message.length;\n            if (message.prefix != null && message.hasOwnProperty(\"prefix\"))\n                object.prefix = options.bytes === String ? $util.base64.encode(message.prefix, 0, message.prefix.length) : options.bytes === Array ? Array.prototype.slice.call(message.prefix) : message.prefix;\n            return object;\n        };\n\n        /**\n         * Converts this LeafOp to JSON.\n         * @function toJSON\n         * @memberof ics23.LeafOp\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        LeafOp.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        return LeafOp;\n    })();\n\n    ics23.InnerOp = (function() {\n\n        /**\n         * Properties of an InnerOp.\n         * @memberof ics23\n         * @interface IInnerOp\n         * @property {ics23.HashOp|null} [hash] InnerOp hash\n         * @property {Uint8Array|null} [prefix] InnerOp prefix\n         * @property {Uint8Array|null} [suffix] InnerOp suffix\n         */\n\n        /**\n         * Constructs a new InnerOp.\n         * @memberof ics23\n         * @classdesc InnerOp represents a merkle-proof step that is not a leaf.\n         * It represents concatenating two children and hashing them to provide the next result.\n         * \n         * The result of the previous step is passed in, so the signature of this op is:\n         * innerOp(child) -> output\n         * \n         * The result of applying InnerOp should be:\n         * output = op.hash(op.prefix || child || op.suffix)\n         * \n         * where the || operator is concatenation of binary data,\n         * and child is the result of hashing all the tree below this step.\n         * \n         * Any special data, like prepending child with the length, or prepending the entire operation with\n         * some value to differentiate from leaf nodes, should be included in prefix and suffix.\n         * If either of prefix or suffix is empty, we just treat it as an empty string\n         * @implements IInnerOp\n         * @constructor\n         * @param {ics23.IInnerOp=} [properties] Properties to set\n         */\n        function InnerOp(properties) {\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * InnerOp hash.\n         * @member {ics23.HashOp} hash\n         * @memberof ics23.InnerOp\n         * @instance\n         */\n        InnerOp.prototype.hash = 0;\n\n        /**\n         * InnerOp prefix.\n         * @member {Uint8Array} prefix\n         * @memberof ics23.InnerOp\n         * @instance\n         */\n        InnerOp.prototype.prefix = $util.newBuffer([]);\n\n        /**\n         * InnerOp suffix.\n         * @member {Uint8Array} suffix\n         * @memberof ics23.InnerOp\n         * @instance\n         */\n        InnerOp.prototype.suffix = $util.newBuffer([]);\n\n        /**\n         * Creates a new InnerOp instance using the specified properties.\n         * @function create\n         * @memberof ics23.InnerOp\n         * @static\n         * @param {ics23.IInnerOp=} [properties] Properties to set\n         * @returns {ics23.InnerOp} InnerOp instance\n         */\n        InnerOp.create = function create(properties) {\n            return new InnerOp(properties);\n        };\n\n        /**\n         * Encodes the specified InnerOp message. Does not implicitly {@link ics23.InnerOp.verify|verify} messages.\n         * @function encode\n         * @memberof ics23.InnerOp\n         * @static\n         * @param {ics23.IInnerOp} message InnerOp message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        InnerOp.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.hash != null && message.hasOwnProperty(\"hash\"))\n                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.hash);\n            if (message.prefix != null && message.hasOwnProperty(\"prefix\"))\n                writer.uint32(/* id 2, wireType 2 =*/18).bytes(message.prefix);\n            if (message.suffix != null && message.hasOwnProperty(\"suffix\"))\n                writer.uint32(/* id 3, wireType 2 =*/26).bytes(message.suffix);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified InnerOp message, length delimited. Does not implicitly {@link ics23.InnerOp.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof ics23.InnerOp\n         * @static\n         * @param {ics23.IInnerOp} message InnerOp message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        InnerOp.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes an InnerOp message from the specified reader or buffer.\n         * @function decode\n         * @memberof ics23.InnerOp\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {ics23.InnerOp} InnerOp\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        InnerOp.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ics23.InnerOp();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    message.hash = reader.int32();\n                    break;\n                case 2:\n                    message.prefix = reader.bytes();\n                    break;\n                case 3:\n                    message.suffix = reader.bytes();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes an InnerOp message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof ics23.InnerOp\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {ics23.InnerOp} InnerOp\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        InnerOp.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies an InnerOp message.\n         * @function verify\n         * @memberof ics23.InnerOp\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        InnerOp.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.hash != null && message.hasOwnProperty(\"hash\"))\n                switch (message.hash) {\n                default:\n                    return \"hash: enum value expected\";\n                case 0:\n                case 1:\n                case 2:\n                case 3:\n                case 4:\n                case 5:\n                case 6:\n                    break;\n                }\n            if (message.prefix != null && message.hasOwnProperty(\"prefix\"))\n                if (!(message.prefix && typeof message.prefix.length === \"number\" || $util.isString(message.prefix)))\n                    return \"prefix: buffer expected\";\n            if (message.suffix != null && message.hasOwnProperty(\"suffix\"))\n                if (!(message.suffix && typeof message.suffix.length === \"number\" || $util.isString(message.suffix)))\n                    return \"suffix: buffer expected\";\n            return null;\n        };\n\n        /**\n         * Creates an InnerOp message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof ics23.InnerOp\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {ics23.InnerOp} InnerOp\n         */\n        InnerOp.fromObject = function fromObject(object) {\n            if (object instanceof $root.ics23.InnerOp)\n                return object;\n            var message = new $root.ics23.InnerOp();\n            switch (object.hash) {\n            case \"NO_HASH\":\n            case 0:\n                message.hash = 0;\n                break;\n            case \"SHA256\":\n            case 1:\n                message.hash = 1;\n                break;\n            case \"SHA512\":\n            case 2:\n                message.hash = 2;\n                break;\n            case \"KECCAK\":\n            case 3:\n                message.hash = 3;\n                break;\n            case \"RIPEMD160\":\n            case 4:\n                message.hash = 4;\n                break;\n            case \"BITCOIN\":\n            case 5:\n                message.hash = 5;\n                break;\n            case \"SHA512_256\":\n            case 6:\n                message.hash = 6;\n                break;\n            }\n            if (object.prefix != null)\n                if (typeof object.prefix === \"string\")\n                    $util.base64.decode(object.prefix, message.prefix = $util.newBuffer($util.base64.length(object.prefix)), 0);\n                else if (object.prefix.length)\n                    message.prefix = object.prefix;\n            if (object.suffix != null)\n                if (typeof object.suffix === \"string\")\n                    $util.base64.decode(object.suffix, message.suffix = $util.newBuffer($util.base64.length(object.suffix)), 0);\n                else if (object.suffix.length)\n                    message.suffix = object.suffix;\n            return message;\n        };\n\n        /**\n         * Creates a plain object from an InnerOp message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof ics23.InnerOp\n         * @static\n         * @param {ics23.InnerOp} message InnerOp\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        InnerOp.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.defaults) {\n                object.hash = options.enums === String ? \"NO_HASH\" : 0;\n                if (options.bytes === String)\n                    object.prefix = \"\";\n                else {\n                    object.prefix = [];\n                    if (options.bytes !== Array)\n                        object.prefix = $util.newBuffer(object.prefix);\n                }\n                if (options.bytes === String)\n                    object.suffix = \"\";\n                else {\n                    object.suffix = [];\n                    if (options.bytes !== Array)\n                        object.suffix = $util.newBuffer(object.suffix);\n                }\n            }\n            if (message.hash != null && message.hasOwnProperty(\"hash\"))\n                object.hash = options.enums === String ? $root.ics23.HashOp[message.hash] : message.hash;\n            if (message.prefix != null && message.hasOwnProperty(\"prefix\"))\n                object.prefix = options.bytes === String ? $util.base64.encode(message.prefix, 0, message.prefix.length) : options.bytes === Array ? Array.prototype.slice.call(message.prefix) : message.prefix;\n            if (message.suffix != null && message.hasOwnProperty(\"suffix\"))\n                object.suffix = options.bytes === String ? $util.base64.encode(message.suffix, 0, message.suffix.length) : options.bytes === Array ? Array.prototype.slice.call(message.suffix) : message.suffix;\n            return object;\n        };\n\n        /**\n         * Converts this InnerOp to JSON.\n         * @function toJSON\n         * @memberof ics23.InnerOp\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        InnerOp.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        return InnerOp;\n    })();\n\n    ics23.ProofSpec = (function() {\n\n        /**\n         * Properties of a ProofSpec.\n         * @memberof ics23\n         * @interface IProofSpec\n         * @property {ics23.ILeafOp|null} [leafSpec] ProofSpec leafSpec\n         * @property {ics23.IInnerSpec|null} [innerSpec] ProofSpec innerSpec\n         * @property {number|null} [maxDepth] ProofSpec maxDepth\n         * @property {number|null} [minDepth] ProofSpec minDepth\n         */\n\n        /**\n         * Constructs a new ProofSpec.\n         * @memberof ics23\n         * @classdesc ProofSpec defines what the expected parameters are for a given proof type.\n         * This can be stored in the client and used to validate any incoming proofs.\n         * \n         * verify(ProofSpec, Proof) -> Proof | Error\n         * \n         * As demonstrated in tests, if we don't fix the algorithm used to calculate the\n         * LeafHash for a given tree, there are many possible key-value pairs that can\n         * generate a given hash (by interpretting the preimage differently).\n         * We need this for proper security, requires client knows a priori what\n         * tree format server uses. But not in code, rather a configuration object.\n         * @implements IProofSpec\n         * @constructor\n         * @param {ics23.IProofSpec=} [properties] Properties to set\n         */\n        function ProofSpec(properties) {\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * ProofSpec leafSpec.\n         * @member {ics23.ILeafOp|null|undefined} leafSpec\n         * @memberof ics23.ProofSpec\n         * @instance\n         */\n        ProofSpec.prototype.leafSpec = null;\n\n        /**\n         * ProofSpec innerSpec.\n         * @member {ics23.IInnerSpec|null|undefined} innerSpec\n         * @memberof ics23.ProofSpec\n         * @instance\n         */\n        ProofSpec.prototype.innerSpec = null;\n\n        /**\n         * ProofSpec maxDepth.\n         * @member {number} maxDepth\n         * @memberof ics23.ProofSpec\n         * @instance\n         */\n        ProofSpec.prototype.maxDepth = 0;\n\n        /**\n         * ProofSpec minDepth.\n         * @member {number} minDepth\n         * @memberof ics23.ProofSpec\n         * @instance\n         */\n        ProofSpec.prototype.minDepth = 0;\n\n        /**\n         * Creates a new ProofSpec instance using the specified properties.\n         * @function create\n         * @memberof ics23.ProofSpec\n         * @static\n         * @param {ics23.IProofSpec=} [properties] Properties to set\n         * @returns {ics23.ProofSpec} ProofSpec instance\n         */\n        ProofSpec.create = function create(properties) {\n            return new ProofSpec(properties);\n        };\n\n        /**\n         * Encodes the specified ProofSpec message. Does not implicitly {@link ics23.ProofSpec.verify|verify} messages.\n         * @function encode\n         * @memberof ics23.ProofSpec\n         * @static\n         * @param {ics23.IProofSpec} message ProofSpec message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        ProofSpec.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.leafSpec != null && message.hasOwnProperty(\"leafSpec\"))\n                $root.ics23.LeafOp.encode(message.leafSpec, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n            if (message.innerSpec != null && message.hasOwnProperty(\"innerSpec\"))\n                $root.ics23.InnerSpec.encode(message.innerSpec, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();\n            if (message.maxDepth != null && message.hasOwnProperty(\"maxDepth\"))\n                writer.uint32(/* id 3, wireType 0 =*/24).int32(message.maxDepth);\n            if (message.minDepth != null && message.hasOwnProperty(\"minDepth\"))\n                writer.uint32(/* id 4, wireType 0 =*/32).int32(message.minDepth);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified ProofSpec message, length delimited. Does not implicitly {@link ics23.ProofSpec.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof ics23.ProofSpec\n         * @static\n         * @param {ics23.IProofSpec} message ProofSpec message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        ProofSpec.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a ProofSpec message from the specified reader or buffer.\n         * @function decode\n         * @memberof ics23.ProofSpec\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {ics23.ProofSpec} ProofSpec\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        ProofSpec.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ics23.ProofSpec();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    message.leafSpec = $root.ics23.LeafOp.decode(reader, reader.uint32());\n                    break;\n                case 2:\n                    message.innerSpec = $root.ics23.InnerSpec.decode(reader, reader.uint32());\n                    break;\n                case 3:\n                    message.maxDepth = reader.int32();\n                    break;\n                case 4:\n                    message.minDepth = reader.int32();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a ProofSpec message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof ics23.ProofSpec\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {ics23.ProofSpec} ProofSpec\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        ProofSpec.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a ProofSpec message.\n         * @function verify\n         * @memberof ics23.ProofSpec\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        ProofSpec.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.leafSpec != null && message.hasOwnProperty(\"leafSpec\")) {\n                var error = $root.ics23.LeafOp.verify(message.leafSpec);\n                if (error)\n                    return \"leafSpec.\" + error;\n            }\n            if (message.innerSpec != null && message.hasOwnProperty(\"innerSpec\")) {\n                var error = $root.ics23.InnerSpec.verify(message.innerSpec);\n                if (error)\n                    return \"innerSpec.\" + error;\n            }\n            if (message.maxDepth != null && message.hasOwnProperty(\"maxDepth\"))\n                if (!$util.isInteger(message.maxDepth))\n                    return \"maxDepth: integer expected\";\n            if (message.minDepth != null && message.hasOwnProperty(\"minDepth\"))\n                if (!$util.isInteger(message.minDepth))\n                    return \"minDepth: integer expected\";\n            return null;\n        };\n\n        /**\n         * Creates a ProofSpec message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof ics23.ProofSpec\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {ics23.ProofSpec} ProofSpec\n         */\n        ProofSpec.fromObject = function fromObject(object) {\n            if (object instanceof $root.ics23.ProofSpec)\n                return object;\n            var message = new $root.ics23.ProofSpec();\n            if (object.leafSpec != null) {\n                if (typeof object.leafSpec !== \"object\")\n                    throw TypeError(\".ics23.ProofSpec.leafSpec: object expected\");\n                message.leafSpec = $root.ics23.LeafOp.fromObject(object.leafSpec);\n            }\n            if (object.innerSpec != null) {\n                if (typeof object.innerSpec !== \"object\")\n                    throw TypeError(\".ics23.ProofSpec.innerSpec: object expected\");\n                message.innerSpec = $root.ics23.InnerSpec.fromObject(object.innerSpec);\n            }\n            if (object.maxDepth != null)\n                message.maxDepth = object.maxDepth | 0;\n            if (object.minDepth != null)\n                message.minDepth = object.minDepth | 0;\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a ProofSpec message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof ics23.ProofSpec\n         * @static\n         * @param {ics23.ProofSpec} message ProofSpec\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        ProofSpec.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.defaults) {\n                object.leafSpec = null;\n                object.innerSpec = null;\n                object.maxDepth = 0;\n                object.minDepth = 0;\n            }\n            if (message.leafSpec != null && message.hasOwnProperty(\"leafSpec\"))\n                object.leafSpec = $root.ics23.LeafOp.toObject(message.leafSpec, options);\n            if (message.innerSpec != null && message.hasOwnProperty(\"innerSpec\"))\n                object.innerSpec = $root.ics23.InnerSpec.toObject(message.innerSpec, options);\n            if (message.maxDepth != null && message.hasOwnProperty(\"maxDepth\"))\n                object.maxDepth = message.maxDepth;\n            if (message.minDepth != null && message.hasOwnProperty(\"minDepth\"))\n                object.minDepth = message.minDepth;\n            return object;\n        };\n\n        /**\n         * Converts this ProofSpec to JSON.\n         * @function toJSON\n         * @memberof ics23.ProofSpec\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        ProofSpec.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        return ProofSpec;\n    })();\n\n    ics23.InnerSpec = (function() {\n\n        /**\n         * Properties of an InnerSpec.\n         * @memberof ics23\n         * @interface IInnerSpec\n         * @property {Array.<number>|null} [childOrder] InnerSpec childOrder\n         * @property {number|null} [childSize] InnerSpec childSize\n         * @property {number|null} [minPrefixLength] InnerSpec minPrefixLength\n         * @property {number|null} [maxPrefixLength] InnerSpec maxPrefixLength\n         * @property {Uint8Array|null} [emptyChild] InnerSpec emptyChild\n         * @property {ics23.HashOp|null} [hash] InnerSpec hash\n         */\n\n        /**\n         * Constructs a new InnerSpec.\n         * @memberof ics23\n         * @classdesc Represents an InnerSpec.\n         * @implements IInnerSpec\n         * @constructor\n         * @param {ics23.IInnerSpec=} [properties] Properties to set\n         */\n        function InnerSpec(properties) {\n            this.childOrder = [];\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * InnerSpec childOrder.\n         * @member {Array.<number>} childOrder\n         * @memberof ics23.InnerSpec\n         * @instance\n         */\n        InnerSpec.prototype.childOrder = $util.emptyArray;\n\n        /**\n         * InnerSpec childSize.\n         * @member {number} childSize\n         * @memberof ics23.InnerSpec\n         * @instance\n         */\n        InnerSpec.prototype.childSize = 0;\n\n        /**\n         * InnerSpec minPrefixLength.\n         * @member {number} minPrefixLength\n         * @memberof ics23.InnerSpec\n         * @instance\n         */\n        InnerSpec.prototype.minPrefixLength = 0;\n\n        /**\n         * InnerSpec maxPrefixLength.\n         * @member {number} maxPrefixLength\n         * @memberof ics23.InnerSpec\n         * @instance\n         */\n        InnerSpec.prototype.maxPrefixLength = 0;\n\n        /**\n         * InnerSpec emptyChild.\n         * @member {Uint8Array} emptyChild\n         * @memberof ics23.InnerSpec\n         * @instance\n         */\n        InnerSpec.prototype.emptyChild = $util.newBuffer([]);\n\n        /**\n         * InnerSpec hash.\n         * @member {ics23.HashOp} hash\n         * @memberof ics23.InnerSpec\n         * @instance\n         */\n        InnerSpec.prototype.hash = 0;\n\n        /**\n         * Creates a new InnerSpec instance using the specified properties.\n         * @function create\n         * @memberof ics23.InnerSpec\n         * @static\n         * @param {ics23.IInnerSpec=} [properties] Properties to set\n         * @returns {ics23.InnerSpec} InnerSpec instance\n         */\n        InnerSpec.create = function create(properties) {\n            return new InnerSpec(properties);\n        };\n\n        /**\n         * Encodes the specified InnerSpec message. Does not implicitly {@link ics23.InnerSpec.verify|verify} messages.\n         * @function encode\n         * @memberof ics23.InnerSpec\n         * @static\n         * @param {ics23.IInnerSpec} message InnerSpec message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        InnerSpec.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.childOrder != null && message.childOrder.length) {\n                writer.uint32(/* id 1, wireType 2 =*/10).fork();\n                for (var i = 0; i < message.childOrder.length; ++i)\n                    writer.int32(message.childOrder[i]);\n                writer.ldelim();\n            }\n            if (message.childSize != null && message.hasOwnProperty(\"childSize\"))\n                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.childSize);\n            if (message.minPrefixLength != null && message.hasOwnProperty(\"minPrefixLength\"))\n                writer.uint32(/* id 3, wireType 0 =*/24).int32(message.minPrefixLength);\n            if (message.maxPrefixLength != null && message.hasOwnProperty(\"maxPrefixLength\"))\n                writer.uint32(/* id 4, wireType 0 =*/32).int32(message.maxPrefixLength);\n            if (message.emptyChild != null && message.hasOwnProperty(\"emptyChild\"))\n                writer.uint32(/* id 5, wireType 2 =*/42).bytes(message.emptyChild);\n            if (message.hash != null && message.hasOwnProperty(\"hash\"))\n                writer.uint32(/* id 6, wireType 0 =*/48).int32(message.hash);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified InnerSpec message, length delimited. Does not implicitly {@link ics23.InnerSpec.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof ics23.InnerSpec\n         * @static\n         * @param {ics23.IInnerSpec} message InnerSpec message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        InnerSpec.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes an InnerSpec message from the specified reader or buffer.\n         * @function decode\n         * @memberof ics23.InnerSpec\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {ics23.InnerSpec} InnerSpec\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        InnerSpec.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ics23.InnerSpec();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    if (!(message.childOrder && message.childOrder.length))\n                        message.childOrder = [];\n                    if ((tag & 7) === 2) {\n                        var end2 = reader.uint32() + reader.pos;\n                        while (reader.pos < end2)\n                            message.childOrder.push(reader.int32());\n                    } else\n                        message.childOrder.push(reader.int32());\n                    break;\n                case 2:\n                    message.childSize = reader.int32();\n                    break;\n                case 3:\n                    message.minPrefixLength = reader.int32();\n                    break;\n                case 4:\n                    message.maxPrefixLength = reader.int32();\n                    break;\n                case 5:\n                    message.emptyChild = reader.bytes();\n                    break;\n                case 6:\n                    message.hash = reader.int32();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes an InnerSpec message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof ics23.InnerSpec\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {ics23.InnerSpec} InnerSpec\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        InnerSpec.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies an InnerSpec message.\n         * @function verify\n         * @memberof ics23.InnerSpec\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        InnerSpec.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.childOrder != null && message.hasOwnProperty(\"childOrder\")) {\n                if (!Array.isArray(message.childOrder))\n                    return \"childOrder: array expected\";\n                for (var i = 0; i < message.childOrder.length; ++i)\n                    if (!$util.isInteger(message.childOrder[i]))\n                        return \"childOrder: integer[] expected\";\n            }\n            if (message.childSize != null && message.hasOwnProperty(\"childSize\"))\n                if (!$util.isInteger(message.childSize))\n                    return \"childSize: integer expected\";\n            if (message.minPrefixLength != null && message.hasOwnProperty(\"minPrefixLength\"))\n                if (!$util.isInteger(message.minPrefixLength))\n                    return \"minPrefixLength: integer expected\";\n            if (message.maxPrefixLength != null && message.hasOwnProperty(\"maxPrefixLength\"))\n                if (!$util.isInteger(message.maxPrefixLength))\n                    return \"maxPrefixLength: integer expected\";\n            if (message.emptyChild != null && message.hasOwnProperty(\"emptyChild\"))\n                if (!(message.emptyChild && typeof message.emptyChild.length === \"number\" || $util.isString(message.emptyChild)))\n                    return \"emptyChild: buffer expected\";\n            if (message.hash != null && message.hasOwnProperty(\"hash\"))\n                switch (message.hash) {\n                default:\n                    return \"hash: enum value expected\";\n                case 0:\n                case 1:\n                case 2:\n                case 3:\n                case 4:\n                case 5:\n                case 6:\n                    break;\n                }\n            return null;\n        };\n\n        /**\n         * Creates an InnerSpec message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof ics23.InnerSpec\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {ics23.InnerSpec} InnerSpec\n         */\n        InnerSpec.fromObject = function fromObject(object) {\n            if (object instanceof $root.ics23.InnerSpec)\n                return object;\n            var message = new $root.ics23.InnerSpec();\n            if (object.childOrder) {\n                if (!Array.isArray(object.childOrder))\n                    throw TypeError(\".ics23.InnerSpec.childOrder: array expected\");\n                message.childOrder = [];\n                for (var i = 0; i < object.childOrder.length; ++i)\n                    message.childOrder[i] = object.childOrder[i] | 0;\n            }\n            if (object.childSize != null)\n                message.childSize = object.childSize | 0;\n            if (object.minPrefixLength != null)\n                message.minPrefixLength = object.minPrefixLength | 0;\n            if (object.maxPrefixLength != null)\n                message.maxPrefixLength = object.maxPrefixLength | 0;\n            if (object.emptyChild != null)\n                if (typeof object.emptyChild === \"string\")\n                    $util.base64.decode(object.emptyChild, message.emptyChild = $util.newBuffer($util.base64.length(object.emptyChild)), 0);\n                else if (object.emptyChild.length)\n                    message.emptyChild = object.emptyChild;\n            switch (object.hash) {\n            case \"NO_HASH\":\n            case 0:\n                message.hash = 0;\n                break;\n            case \"SHA256\":\n            case 1:\n                message.hash = 1;\n                break;\n            case \"SHA512\":\n            case 2:\n                message.hash = 2;\n                break;\n            case \"KECCAK\":\n            case 3:\n                message.hash = 3;\n                break;\n            case \"RIPEMD160\":\n            case 4:\n                message.hash = 4;\n                break;\n            case \"BITCOIN\":\n            case 5:\n                message.hash = 5;\n                break;\n            case \"SHA512_256\":\n            case 6:\n                message.hash = 6;\n                break;\n            }\n            return message;\n        };\n\n        /**\n         * Creates a plain object from an InnerSpec message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof ics23.InnerSpec\n         * @static\n         * @param {ics23.InnerSpec} message InnerSpec\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        InnerSpec.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.arrays || options.defaults)\n                object.childOrder = [];\n            if (options.defaults) {\n                object.childSize = 0;\n                object.minPrefixLength = 0;\n                object.maxPrefixLength = 0;\n                if (options.bytes === String)\n                    object.emptyChild = \"\";\n                else {\n                    object.emptyChild = [];\n                    if (options.bytes !== Array)\n                        object.emptyChild = $util.newBuffer(object.emptyChild);\n                }\n                object.hash = options.enums === String ? \"NO_HASH\" : 0;\n            }\n            if (message.childOrder && message.childOrder.length) {\n                object.childOrder = [];\n                for (var j = 0; j < message.childOrder.length; ++j)\n                    object.childOrder[j] = message.childOrder[j];\n            }\n            if (message.childSize != null && message.hasOwnProperty(\"childSize\"))\n                object.childSize = message.childSize;\n            if (message.minPrefixLength != null && message.hasOwnProperty(\"minPrefixLength\"))\n                object.minPrefixLength = message.minPrefixLength;\n            if (message.maxPrefixLength != null && message.hasOwnProperty(\"maxPrefixLength\"))\n                object.maxPrefixLength = message.maxPrefixLength;\n            if (message.emptyChild != null && message.hasOwnProperty(\"emptyChild\"))\n                object.emptyChild = options.bytes === String ? $util.base64.encode(message.emptyChild, 0, message.emptyChild.length) : options.bytes === Array ? Array.prototype.slice.call(message.emptyChild) : message.emptyChild;\n            if (message.hash != null && message.hasOwnProperty(\"hash\"))\n                object.hash = options.enums === String ? $root.ics23.HashOp[message.hash] : message.hash;\n            return object;\n        };\n\n        /**\n         * Converts this InnerSpec to JSON.\n         * @function toJSON\n         * @memberof ics23.InnerSpec\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        InnerSpec.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        return InnerSpec;\n    })();\n\n    ics23.BatchProof = (function() {\n\n        /**\n         * Properties of a BatchProof.\n         * @memberof ics23\n         * @interface IBatchProof\n         * @property {Array.<ics23.IBatchEntry>|null} [entries] BatchProof entries\n         */\n\n        /**\n         * Constructs a new BatchProof.\n         * @memberof ics23\n         * @classdesc Represents a BatchProof.\n         * @implements IBatchProof\n         * @constructor\n         * @param {ics23.IBatchProof=} [properties] Properties to set\n         */\n        function BatchProof(properties) {\n            this.entries = [];\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * BatchProof entries.\n         * @member {Array.<ics23.IBatchEntry>} entries\n         * @memberof ics23.BatchProof\n         * @instance\n         */\n        BatchProof.prototype.entries = $util.emptyArray;\n\n        /**\n         * Creates a new BatchProof instance using the specified properties.\n         * @function create\n         * @memberof ics23.BatchProof\n         * @static\n         * @param {ics23.IBatchProof=} [properties] Properties to set\n         * @returns {ics23.BatchProof} BatchProof instance\n         */\n        BatchProof.create = function create(properties) {\n            return new BatchProof(properties);\n        };\n\n        /**\n         * Encodes the specified BatchProof message. Does not implicitly {@link ics23.BatchProof.verify|verify} messages.\n         * @function encode\n         * @memberof ics23.BatchProof\n         * @static\n         * @param {ics23.IBatchProof} message BatchProof message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        BatchProof.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.entries != null && message.entries.length)\n                for (var i = 0; i < message.entries.length; ++i)\n                    $root.ics23.BatchEntry.encode(message.entries[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n            return writer;\n        };\n\n        /**\n         * Encodes the specified BatchProof message, length delimited. Does not implicitly {@link ics23.BatchProof.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof ics23.BatchProof\n         * @static\n         * @param {ics23.IBatchProof} message BatchProof message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        BatchProof.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a BatchProof message from the specified reader or buffer.\n         * @function decode\n         * @memberof ics23.BatchProof\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {ics23.BatchProof} BatchProof\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        BatchProof.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ics23.BatchProof();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    if (!(message.entries && message.entries.length))\n                        message.entries = [];\n                    message.entries.push($root.ics23.BatchEntry.decode(reader, reader.uint32()));\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a BatchProof message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof ics23.BatchProof\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {ics23.BatchProof} BatchProof\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        BatchProof.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a BatchProof message.\n         * @function verify\n         * @memberof ics23.BatchProof\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        BatchProof.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.entries != null && message.hasOwnProperty(\"entries\")) {\n                if (!Array.isArray(message.entries))\n                    return \"entries: array expected\";\n                for (var i = 0; i < message.entries.length; ++i) {\n                    var error = $root.ics23.BatchEntry.verify(message.entries[i]);\n                    if (error)\n                        return \"entries.\" + error;\n                }\n            }\n            return null;\n        };\n\n        /**\n         * Creates a BatchProof message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof ics23.BatchProof\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {ics23.BatchProof} BatchProof\n         */\n        BatchProof.fromObject = function fromObject(object) {\n            if (object instanceof $root.ics23.BatchProof)\n                return object;\n            var message = new $root.ics23.BatchProof();\n            if (object.entries) {\n                if (!Array.isArray(object.entries))\n                    throw TypeError(\".ics23.BatchProof.entries: array expected\");\n                message.entries = [];\n                for (var i = 0; i < object.entries.length; ++i) {\n                    if (typeof object.entries[i] !== \"object\")\n                        throw TypeError(\".ics23.BatchProof.entries: object expected\");\n                    message.entries[i] = $root.ics23.BatchEntry.fromObject(object.entries[i]);\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a BatchProof message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof ics23.BatchProof\n         * @static\n         * @param {ics23.BatchProof} message BatchProof\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        BatchProof.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.arrays || options.defaults)\n                object.entries = [];\n            if (message.entries && message.entries.length) {\n                object.entries = [];\n                for (var j = 0; j < message.entries.length; ++j)\n                    object.entries[j] = $root.ics23.BatchEntry.toObject(message.entries[j], options);\n            }\n            return object;\n        };\n\n        /**\n         * Converts this BatchProof to JSON.\n         * @function toJSON\n         * @memberof ics23.BatchProof\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        BatchProof.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        return BatchProof;\n    })();\n\n    ics23.BatchEntry = (function() {\n\n        /**\n         * Properties of a BatchEntry.\n         * @memberof ics23\n         * @interface IBatchEntry\n         * @property {ics23.IExistenceProof|null} [exist] BatchEntry exist\n         * @property {ics23.INonExistenceProof|null} [nonexist] BatchEntry nonexist\n         */\n\n        /**\n         * Constructs a new BatchEntry.\n         * @memberof ics23\n         * @classdesc Represents a BatchEntry.\n         * @implements IBatchEntry\n         * @constructor\n         * @param {ics23.IBatchEntry=} [properties] Properties to set\n         */\n        function BatchEntry(properties) {\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * BatchEntry exist.\n         * @member {ics23.IExistenceProof|null|undefined} exist\n         * @memberof ics23.BatchEntry\n         * @instance\n         */\n        BatchEntry.prototype.exist = null;\n\n        /**\n         * BatchEntry nonexist.\n         * @member {ics23.INonExistenceProof|null|undefined} nonexist\n         * @memberof ics23.BatchEntry\n         * @instance\n         */\n        BatchEntry.prototype.nonexist = null;\n\n        // OneOf field names bound to virtual getters and setters\n        var $oneOfFields;\n\n        /**\n         * BatchEntry proof.\n         * @member {\"exist\"|\"nonexist\"|undefined} proof\n         * @memberof ics23.BatchEntry\n         * @instance\n         */\n        Object.defineProperty(BatchEntry.prototype, \"proof\", {\n            get: $util.oneOfGetter($oneOfFields = [\"exist\", \"nonexist\"]),\n            set: $util.oneOfSetter($oneOfFields)\n        });\n\n        /**\n         * Creates a new BatchEntry instance using the specified properties.\n         * @function create\n         * @memberof ics23.BatchEntry\n         * @static\n         * @param {ics23.IBatchEntry=} [properties] Properties to set\n         * @returns {ics23.BatchEntry} BatchEntry instance\n         */\n        BatchEntry.create = function create(properties) {\n            return new BatchEntry(properties);\n        };\n\n        /**\n         * Encodes the specified BatchEntry message. Does not implicitly {@link ics23.BatchEntry.verify|verify} messages.\n         * @function encode\n         * @memberof ics23.BatchEntry\n         * @static\n         * @param {ics23.IBatchEntry} message BatchEntry message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        BatchEntry.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.exist != null && message.hasOwnProperty(\"exist\"))\n                $root.ics23.ExistenceProof.encode(message.exist, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n            if (message.nonexist != null && message.hasOwnProperty(\"nonexist\"))\n                $root.ics23.NonExistenceProof.encode(message.nonexist, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();\n            return writer;\n        };\n\n        /**\n         * Encodes the specified BatchEntry message, length delimited. Does not implicitly {@link ics23.BatchEntry.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof ics23.BatchEntry\n         * @static\n         * @param {ics23.IBatchEntry} message BatchEntry message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        BatchEntry.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a BatchEntry message from the specified reader or buffer.\n         * @function decode\n         * @memberof ics23.BatchEntry\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {ics23.BatchEntry} BatchEntry\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        BatchEntry.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ics23.BatchEntry();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    message.exist = $root.ics23.ExistenceProof.decode(reader, reader.uint32());\n                    break;\n                case 2:\n                    message.nonexist = $root.ics23.NonExistenceProof.decode(reader, reader.uint32());\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a BatchEntry message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof ics23.BatchEntry\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {ics23.BatchEntry} BatchEntry\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        BatchEntry.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a BatchEntry message.\n         * @function verify\n         * @memberof ics23.BatchEntry\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        BatchEntry.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            var properties = {};\n            if (message.exist != null && message.hasOwnProperty(\"exist\")) {\n                properties.proof = 1;\n                {\n                    var error = $root.ics23.ExistenceProof.verify(message.exist);\n                    if (error)\n                        return \"exist.\" + error;\n                }\n            }\n            if (message.nonexist != null && message.hasOwnProperty(\"nonexist\")) {\n                if (properties.proof === 1)\n                    return \"proof: multiple values\";\n                properties.proof = 1;\n                {\n                    var error = $root.ics23.NonExistenceProof.verify(message.nonexist);\n                    if (error)\n                        return \"nonexist.\" + error;\n                }\n            }\n            return null;\n        };\n\n        /**\n         * Creates a BatchEntry message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof ics23.BatchEntry\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {ics23.BatchEntry} BatchEntry\n         */\n        BatchEntry.fromObject = function fromObject(object) {\n            if (object instanceof $root.ics23.BatchEntry)\n                return object;\n            var message = new $root.ics23.BatchEntry();\n            if (object.exist != null) {\n                if (typeof object.exist !== \"object\")\n                    throw TypeError(\".ics23.BatchEntry.exist: object expected\");\n                message.exist = $root.ics23.ExistenceProof.fromObject(object.exist);\n            }\n            if (object.nonexist != null) {\n                if (typeof object.nonexist !== \"object\")\n                    throw TypeError(\".ics23.BatchEntry.nonexist: object expected\");\n                message.nonexist = $root.ics23.NonExistenceProof.fromObject(object.nonexist);\n            }\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a BatchEntry message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof ics23.BatchEntry\n         * @static\n         * @param {ics23.BatchEntry} message BatchEntry\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        BatchEntry.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (message.exist != null && message.hasOwnProperty(\"exist\")) {\n                object.exist = $root.ics23.ExistenceProof.toObject(message.exist, options);\n                if (options.oneofs)\n                    object.proof = \"exist\";\n            }\n            if (message.nonexist != null && message.hasOwnProperty(\"nonexist\")) {\n                object.nonexist = $root.ics23.NonExistenceProof.toObject(message.nonexist, options);\n                if (options.oneofs)\n                    object.proof = \"nonexist\";\n            }\n            return object;\n        };\n\n        /**\n         * Converts this BatchEntry to JSON.\n         * @function toJSON\n         * @memberof ics23.BatchEntry\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        BatchEntry.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        return BatchEntry;\n    })();\n\n    ics23.CompressedBatchProof = (function() {\n\n        /**\n         * Properties of a CompressedBatchProof.\n         * @memberof ics23\n         * @interface ICompressedBatchProof\n         * @property {Array.<ics23.ICompressedBatchEntry>|null} [entries] CompressedBatchProof entries\n         * @property {Array.<ics23.IInnerOp>|null} [lookupInners] CompressedBatchProof lookupInners\n         */\n\n        /**\n         * Constructs a new CompressedBatchProof.\n         * @memberof ics23\n         * @classdesc Represents a CompressedBatchProof.\n         * @implements ICompressedBatchProof\n         * @constructor\n         * @param {ics23.ICompressedBatchProof=} [properties] Properties to set\n         */\n        function CompressedBatchProof(properties) {\n            this.entries = [];\n            this.lookupInners = [];\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * CompressedBatchProof entries.\n         * @member {Array.<ics23.ICompressedBatchEntry>} entries\n         * @memberof ics23.CompressedBatchProof\n         * @instance\n         */\n        CompressedBatchProof.prototype.entries = $util.emptyArray;\n\n        /**\n         * CompressedBatchProof lookupInners.\n         * @member {Array.<ics23.IInnerOp>} lookupInners\n         * @memberof ics23.CompressedBatchProof\n         * @instance\n         */\n        CompressedBatchProof.prototype.lookupInners = $util.emptyArray;\n\n        /**\n         * Creates a new CompressedBatchProof instance using the specified properties.\n         * @function create\n         * @memberof ics23.CompressedBatchProof\n         * @static\n         * @param {ics23.ICompressedBatchProof=} [properties] Properties to set\n         * @returns {ics23.CompressedBatchProof} CompressedBatchProof instance\n         */\n        CompressedBatchProof.create = function create(properties) {\n            return new CompressedBatchProof(properties);\n        };\n\n        /**\n         * Encodes the specified CompressedBatchProof message. Does not implicitly {@link ics23.CompressedBatchProof.verify|verify} messages.\n         * @function encode\n         * @memberof ics23.CompressedBatchProof\n         * @static\n         * @param {ics23.ICompressedBatchProof} message CompressedBatchProof message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        CompressedBatchProof.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.entries != null && message.entries.length)\n                for (var i = 0; i < message.entries.length; ++i)\n                    $root.ics23.CompressedBatchEntry.encode(message.entries[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n            if (message.lookupInners != null && message.lookupInners.length)\n                for (var i = 0; i < message.lookupInners.length; ++i)\n                    $root.ics23.InnerOp.encode(message.lookupInners[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();\n            return writer;\n        };\n\n        /**\n         * Encodes the specified CompressedBatchProof message, length delimited. Does not implicitly {@link ics23.CompressedBatchProof.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof ics23.CompressedBatchProof\n         * @static\n         * @param {ics23.ICompressedBatchProof} message CompressedBatchProof message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        CompressedBatchProof.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a CompressedBatchProof message from the specified reader or buffer.\n         * @function decode\n         * @memberof ics23.CompressedBatchProof\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {ics23.CompressedBatchProof} CompressedBatchProof\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        CompressedBatchProof.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ics23.CompressedBatchProof();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    if (!(message.entries && message.entries.length))\n                        message.entries = [];\n                    message.entries.push($root.ics23.CompressedBatchEntry.decode(reader, reader.uint32()));\n                    break;\n                case 2:\n                    if (!(message.lookupInners && message.lookupInners.length))\n                        message.lookupInners = [];\n                    message.lookupInners.push($root.ics23.InnerOp.decode(reader, reader.uint32()));\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a CompressedBatchProof message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof ics23.CompressedBatchProof\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {ics23.CompressedBatchProof} CompressedBatchProof\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        CompressedBatchProof.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a CompressedBatchProof message.\n         * @function verify\n         * @memberof ics23.CompressedBatchProof\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        CompressedBatchProof.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.entries != null && message.hasOwnProperty(\"entries\")) {\n                if (!Array.isArray(message.entries))\n                    return \"entries: array expected\";\n                for (var i = 0; i < message.entries.length; ++i) {\n                    var error = $root.ics23.CompressedBatchEntry.verify(message.entries[i]);\n                    if (error)\n                        return \"entries.\" + error;\n                }\n            }\n            if (message.lookupInners != null && message.hasOwnProperty(\"lookupInners\")) {\n                if (!Array.isArray(message.lookupInners))\n                    return \"lookupInners: array expected\";\n                for (var i = 0; i < message.lookupInners.length; ++i) {\n                    var error = $root.ics23.InnerOp.verify(message.lookupInners[i]);\n                    if (error)\n                        return \"lookupInners.\" + error;\n                }\n            }\n            return null;\n        };\n\n        /**\n         * Creates a CompressedBatchProof message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof ics23.CompressedBatchProof\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {ics23.CompressedBatchProof} CompressedBatchProof\n         */\n        CompressedBatchProof.fromObject = function fromObject(object) {\n            if (object instanceof $root.ics23.CompressedBatchProof)\n                return object;\n            var message = new $root.ics23.CompressedBatchProof();\n            if (object.entries) {\n                if (!Array.isArray(object.entries))\n                    throw TypeError(\".ics23.CompressedBatchProof.entries: array expected\");\n                message.entries = [];\n                for (var i = 0; i < object.entries.length; ++i) {\n                    if (typeof object.entries[i] !== \"object\")\n                        throw TypeError(\".ics23.CompressedBatchProof.entries: object expected\");\n                    message.entries[i] = $root.ics23.CompressedBatchEntry.fromObject(object.entries[i]);\n                }\n            }\n            if (object.lookupInners) {\n                if (!Array.isArray(object.lookupInners))\n                    throw TypeError(\".ics23.CompressedBatchProof.lookupInners: array expected\");\n                message.lookupInners = [];\n                for (var i = 0; i < object.lookupInners.length; ++i) {\n                    if (typeof object.lookupInners[i] !== \"object\")\n                        throw TypeError(\".ics23.CompressedBatchProof.lookupInners: object expected\");\n                    message.lookupInners[i] = $root.ics23.InnerOp.fromObject(object.lookupInners[i]);\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a CompressedBatchProof message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof ics23.CompressedBatchProof\n         * @static\n         * @param {ics23.CompressedBatchProof} message CompressedBatchProof\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        CompressedBatchProof.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.arrays || options.defaults) {\n                object.entries = [];\n                object.lookupInners = [];\n            }\n            if (message.entries && message.entries.length) {\n                object.entries = [];\n                for (var j = 0; j < message.entries.length; ++j)\n                    object.entries[j] = $root.ics23.CompressedBatchEntry.toObject(message.entries[j], options);\n            }\n            if (message.lookupInners && message.lookupInners.length) {\n                object.lookupInners = [];\n                for (var j = 0; j < message.lookupInners.length; ++j)\n                    object.lookupInners[j] = $root.ics23.InnerOp.toObject(message.lookupInners[j], options);\n            }\n            return object;\n        };\n\n        /**\n         * Converts this CompressedBatchProof to JSON.\n         * @function toJSON\n         * @memberof ics23.CompressedBatchProof\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        CompressedBatchProof.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        return CompressedBatchProof;\n    })();\n\n    ics23.CompressedBatchEntry = (function() {\n\n        /**\n         * Properties of a CompressedBatchEntry.\n         * @memberof ics23\n         * @interface ICompressedBatchEntry\n         * @property {ics23.ICompressedExistenceProof|null} [exist] CompressedBatchEntry exist\n         * @property {ics23.ICompressedNonExistenceProof|null} [nonexist] CompressedBatchEntry nonexist\n         */\n\n        /**\n         * Constructs a new CompressedBatchEntry.\n         * @memberof ics23\n         * @classdesc Represents a CompressedBatchEntry.\n         * @implements ICompressedBatchEntry\n         * @constructor\n         * @param {ics23.ICompressedBatchEntry=} [properties] Properties to set\n         */\n        function CompressedBatchEntry(properties) {\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * CompressedBatchEntry exist.\n         * @member {ics23.ICompressedExistenceProof|null|undefined} exist\n         * @memberof ics23.CompressedBatchEntry\n         * @instance\n         */\n        CompressedBatchEntry.prototype.exist = null;\n\n        /**\n         * CompressedBatchEntry nonexist.\n         * @member {ics23.ICompressedNonExistenceProof|null|undefined} nonexist\n         * @memberof ics23.CompressedBatchEntry\n         * @instance\n         */\n        CompressedBatchEntry.prototype.nonexist = null;\n\n        // OneOf field names bound to virtual getters and setters\n        var $oneOfFields;\n\n        /**\n         * CompressedBatchEntry proof.\n         * @member {\"exist\"|\"nonexist\"|undefined} proof\n         * @memberof ics23.CompressedBatchEntry\n         * @instance\n         */\n        Object.defineProperty(CompressedBatchEntry.prototype, \"proof\", {\n            get: $util.oneOfGetter($oneOfFields = [\"exist\", \"nonexist\"]),\n            set: $util.oneOfSetter($oneOfFields)\n        });\n\n        /**\n         * Creates a new CompressedBatchEntry instance using the specified properties.\n         * @function create\n         * @memberof ics23.CompressedBatchEntry\n         * @static\n         * @param {ics23.ICompressedBatchEntry=} [properties] Properties to set\n         * @returns {ics23.CompressedBatchEntry} CompressedBatchEntry instance\n         */\n        CompressedBatchEntry.create = function create(properties) {\n            return new CompressedBatchEntry(properties);\n        };\n\n        /**\n         * Encodes the specified CompressedBatchEntry message. Does not implicitly {@link ics23.CompressedBatchEntry.verify|verify} messages.\n         * @function encode\n         * @memberof ics23.CompressedBatchEntry\n         * @static\n         * @param {ics23.ICompressedBatchEntry} message CompressedBatchEntry message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        CompressedBatchEntry.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.exist != null && message.hasOwnProperty(\"exist\"))\n                $root.ics23.CompressedExistenceProof.encode(message.exist, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n            if (message.nonexist != null && message.hasOwnProperty(\"nonexist\"))\n                $root.ics23.CompressedNonExistenceProof.encode(message.nonexist, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();\n            return writer;\n        };\n\n        /**\n         * Encodes the specified CompressedBatchEntry message, length delimited. Does not implicitly {@link ics23.CompressedBatchEntry.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof ics23.CompressedBatchEntry\n         * @static\n         * @param {ics23.ICompressedBatchEntry} message CompressedBatchEntry message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        CompressedBatchEntry.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a CompressedBatchEntry message from the specified reader or buffer.\n         * @function decode\n         * @memberof ics23.CompressedBatchEntry\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {ics23.CompressedBatchEntry} CompressedBatchEntry\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        CompressedBatchEntry.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ics23.CompressedBatchEntry();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    message.exist = $root.ics23.CompressedExistenceProof.decode(reader, reader.uint32());\n                    break;\n                case 2:\n                    message.nonexist = $root.ics23.CompressedNonExistenceProof.decode(reader, reader.uint32());\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a CompressedBatchEntry message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof ics23.CompressedBatchEntry\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {ics23.CompressedBatchEntry} CompressedBatchEntry\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        CompressedBatchEntry.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a CompressedBatchEntry message.\n         * @function verify\n         * @memberof ics23.CompressedBatchEntry\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        CompressedBatchEntry.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            var properties = {};\n            if (message.exist != null && message.hasOwnProperty(\"exist\")) {\n                properties.proof = 1;\n                {\n                    var error = $root.ics23.CompressedExistenceProof.verify(message.exist);\n                    if (error)\n                        return \"exist.\" + error;\n                }\n            }\n            if (message.nonexist != null && message.hasOwnProperty(\"nonexist\")) {\n                if (properties.proof === 1)\n                    return \"proof: multiple values\";\n                properties.proof = 1;\n                {\n                    var error = $root.ics23.CompressedNonExistenceProof.verify(message.nonexist);\n                    if (error)\n                        return \"nonexist.\" + error;\n                }\n            }\n            return null;\n        };\n\n        /**\n         * Creates a CompressedBatchEntry message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof ics23.CompressedBatchEntry\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {ics23.CompressedBatchEntry} CompressedBatchEntry\n         */\n        CompressedBatchEntry.fromObject = function fromObject(object) {\n            if (object instanceof $root.ics23.CompressedBatchEntry)\n                return object;\n            var message = new $root.ics23.CompressedBatchEntry();\n            if (object.exist != null) {\n                if (typeof object.exist !== \"object\")\n                    throw TypeError(\".ics23.CompressedBatchEntry.exist: object expected\");\n                message.exist = $root.ics23.CompressedExistenceProof.fromObject(object.exist);\n            }\n            if (object.nonexist != null) {\n                if (typeof object.nonexist !== \"object\")\n                    throw TypeError(\".ics23.CompressedBatchEntry.nonexist: object expected\");\n                message.nonexist = $root.ics23.CompressedNonExistenceProof.fromObject(object.nonexist);\n            }\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a CompressedBatchEntry message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof ics23.CompressedBatchEntry\n         * @static\n         * @param {ics23.CompressedBatchEntry} message CompressedBatchEntry\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        CompressedBatchEntry.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (message.exist != null && message.hasOwnProperty(\"exist\")) {\n                object.exist = $root.ics23.CompressedExistenceProof.toObject(message.exist, options);\n                if (options.oneofs)\n                    object.proof = \"exist\";\n            }\n            if (message.nonexist != null && message.hasOwnProperty(\"nonexist\")) {\n                object.nonexist = $root.ics23.CompressedNonExistenceProof.toObject(message.nonexist, options);\n                if (options.oneofs)\n                    object.proof = \"nonexist\";\n            }\n            return object;\n        };\n\n        /**\n         * Converts this CompressedBatchEntry to JSON.\n         * @function toJSON\n         * @memberof ics23.CompressedBatchEntry\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        CompressedBatchEntry.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        return CompressedBatchEntry;\n    })();\n\n    ics23.CompressedExistenceProof = (function() {\n\n        /**\n         * Properties of a CompressedExistenceProof.\n         * @memberof ics23\n         * @interface ICompressedExistenceProof\n         * @property {Uint8Array|null} [key] CompressedExistenceProof key\n         * @property {Uint8Array|null} [value] CompressedExistenceProof value\n         * @property {ics23.ILeafOp|null} [leaf] CompressedExistenceProof leaf\n         * @property {Array.<number>|null} [path] CompressedExistenceProof path\n         */\n\n        /**\n         * Constructs a new CompressedExistenceProof.\n         * @memberof ics23\n         * @classdesc Represents a CompressedExistenceProof.\n         * @implements ICompressedExistenceProof\n         * @constructor\n         * @param {ics23.ICompressedExistenceProof=} [properties] Properties to set\n         */\n        function CompressedExistenceProof(properties) {\n            this.path = [];\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * CompressedExistenceProof key.\n         * @member {Uint8Array} key\n         * @memberof ics23.CompressedExistenceProof\n         * @instance\n         */\n        CompressedExistenceProof.prototype.key = $util.newBuffer([]);\n\n        /**\n         * CompressedExistenceProof value.\n         * @member {Uint8Array} value\n         * @memberof ics23.CompressedExistenceProof\n         * @instance\n         */\n        CompressedExistenceProof.prototype.value = $util.newBuffer([]);\n\n        /**\n         * CompressedExistenceProof leaf.\n         * @member {ics23.ILeafOp|null|undefined} leaf\n         * @memberof ics23.CompressedExistenceProof\n         * @instance\n         */\n        CompressedExistenceProof.prototype.leaf = null;\n\n        /**\n         * CompressedExistenceProof path.\n         * @member {Array.<number>} path\n         * @memberof ics23.CompressedExistenceProof\n         * @instance\n         */\n        CompressedExistenceProof.prototype.path = $util.emptyArray;\n\n        /**\n         * Creates a new CompressedExistenceProof instance using the specified properties.\n         * @function create\n         * @memberof ics23.CompressedExistenceProof\n         * @static\n         * @param {ics23.ICompressedExistenceProof=} [properties] Properties to set\n         * @returns {ics23.CompressedExistenceProof} CompressedExistenceProof instance\n         */\n        CompressedExistenceProof.create = function create(properties) {\n            return new CompressedExistenceProof(properties);\n        };\n\n        /**\n         * Encodes the specified CompressedExistenceProof message. Does not implicitly {@link ics23.CompressedExistenceProof.verify|verify} messages.\n         * @function encode\n         * @memberof ics23.CompressedExistenceProof\n         * @static\n         * @param {ics23.ICompressedExistenceProof} message CompressedExistenceProof message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        CompressedExistenceProof.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.key != null && message.hasOwnProperty(\"key\"))\n                writer.uint32(/* id 1, wireType 2 =*/10).bytes(message.key);\n            if (message.value != null && message.hasOwnProperty(\"value\"))\n                writer.uint32(/* id 2, wireType 2 =*/18).bytes(message.value);\n            if (message.leaf != null && message.hasOwnProperty(\"leaf\"))\n                $root.ics23.LeafOp.encode(message.leaf, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();\n            if (message.path != null && message.path.length) {\n                writer.uint32(/* id 4, wireType 2 =*/34).fork();\n                for (var i = 0; i < message.path.length; ++i)\n                    writer.int32(message.path[i]);\n                writer.ldelim();\n            }\n            return writer;\n        };\n\n        /**\n         * Encodes the specified CompressedExistenceProof message, length delimited. Does not implicitly {@link ics23.CompressedExistenceProof.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof ics23.CompressedExistenceProof\n         * @static\n         * @param {ics23.ICompressedExistenceProof} message CompressedExistenceProof message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        CompressedExistenceProof.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a CompressedExistenceProof message from the specified reader or buffer.\n         * @function decode\n         * @memberof ics23.CompressedExistenceProof\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {ics23.CompressedExistenceProof} CompressedExistenceProof\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        CompressedExistenceProof.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ics23.CompressedExistenceProof();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    message.key = reader.bytes();\n                    break;\n                case 2:\n                    message.value = reader.bytes();\n                    break;\n                case 3:\n                    message.leaf = $root.ics23.LeafOp.decode(reader, reader.uint32());\n                    break;\n                case 4:\n                    if (!(message.path && message.path.length))\n                        message.path = [];\n                    if ((tag & 7) === 2) {\n                        var end2 = reader.uint32() + reader.pos;\n                        while (reader.pos < end2)\n                            message.path.push(reader.int32());\n                    } else\n                        message.path.push(reader.int32());\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a CompressedExistenceProof message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof ics23.CompressedExistenceProof\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {ics23.CompressedExistenceProof} CompressedExistenceProof\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        CompressedExistenceProof.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a CompressedExistenceProof message.\n         * @function verify\n         * @memberof ics23.CompressedExistenceProof\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        CompressedExistenceProof.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.key != null && message.hasOwnProperty(\"key\"))\n                if (!(message.key && typeof message.key.length === \"number\" || $util.isString(message.key)))\n                    return \"key: buffer expected\";\n            if (message.value != null && message.hasOwnProperty(\"value\"))\n                if (!(message.value && typeof message.value.length === \"number\" || $util.isString(message.value)))\n                    return \"value: buffer expected\";\n            if (message.leaf != null && message.hasOwnProperty(\"leaf\")) {\n                var error = $root.ics23.LeafOp.verify(message.leaf);\n                if (error)\n                    return \"leaf.\" + error;\n            }\n            if (message.path != null && message.hasOwnProperty(\"path\")) {\n                if (!Array.isArray(message.path))\n                    return \"path: array expected\";\n                for (var i = 0; i < message.path.length; ++i)\n                    if (!$util.isInteger(message.path[i]))\n                        return \"path: integer[] expected\";\n            }\n            return null;\n        };\n\n        /**\n         * Creates a CompressedExistenceProof message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof ics23.CompressedExistenceProof\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {ics23.CompressedExistenceProof} CompressedExistenceProof\n         */\n        CompressedExistenceProof.fromObject = function fromObject(object) {\n            if (object instanceof $root.ics23.CompressedExistenceProof)\n                return object;\n            var message = new $root.ics23.CompressedExistenceProof();\n            if (object.key != null)\n                if (typeof object.key === \"string\")\n                    $util.base64.decode(object.key, message.key = $util.newBuffer($util.base64.length(object.key)), 0);\n                else if (object.key.length)\n                    message.key = object.key;\n            if (object.value != null)\n                if (typeof object.value === \"string\")\n                    $util.base64.decode(object.value, message.value = $util.newBuffer($util.base64.length(object.value)), 0);\n                else if (object.value.length)\n                    message.value = object.value;\n            if (object.leaf != null) {\n                if (typeof object.leaf !== \"object\")\n                    throw TypeError(\".ics23.CompressedExistenceProof.leaf: object expected\");\n                message.leaf = $root.ics23.LeafOp.fromObject(object.leaf);\n            }\n            if (object.path) {\n                if (!Array.isArray(object.path))\n                    throw TypeError(\".ics23.CompressedExistenceProof.path: array expected\");\n                message.path = [];\n                for (var i = 0; i < object.path.length; ++i)\n                    message.path[i] = object.path[i] | 0;\n            }\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a CompressedExistenceProof message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof ics23.CompressedExistenceProof\n         * @static\n         * @param {ics23.CompressedExistenceProof} message CompressedExistenceProof\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        CompressedExistenceProof.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.arrays || options.defaults)\n                object.path = [];\n            if (options.defaults) {\n                if (options.bytes === String)\n                    object.key = \"\";\n                else {\n                    object.key = [];\n                    if (options.bytes !== Array)\n                        object.key = $util.newBuffer(object.key);\n                }\n                if (options.bytes === String)\n                    object.value = \"\";\n                else {\n                    object.value = [];\n                    if (options.bytes !== Array)\n                        object.value = $util.newBuffer(object.value);\n                }\n                object.leaf = null;\n            }\n            if (message.key != null && message.hasOwnProperty(\"key\"))\n                object.key = options.bytes === String ? $util.base64.encode(message.key, 0, message.key.length) : options.bytes === Array ? Array.prototype.slice.call(message.key) : message.key;\n            if (message.value != null && message.hasOwnProperty(\"value\"))\n                object.value = options.bytes === String ? $util.base64.encode(message.value, 0, message.value.length) : options.bytes === Array ? Array.prototype.slice.call(message.value) : message.value;\n            if (message.leaf != null && message.hasOwnProperty(\"leaf\"))\n                object.leaf = $root.ics23.LeafOp.toObject(message.leaf, options);\n            if (message.path && message.path.length) {\n                object.path = [];\n                for (var j = 0; j < message.path.length; ++j)\n                    object.path[j] = message.path[j];\n            }\n            return object;\n        };\n\n        /**\n         * Converts this CompressedExistenceProof to JSON.\n         * @function toJSON\n         * @memberof ics23.CompressedExistenceProof\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        CompressedExistenceProof.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        return CompressedExistenceProof;\n    })();\n\n    ics23.CompressedNonExistenceProof = (function() {\n\n        /**\n         * Properties of a CompressedNonExistenceProof.\n         * @memberof ics23\n         * @interface ICompressedNonExistenceProof\n         * @property {Uint8Array|null} [key] CompressedNonExistenceProof key\n         * @property {ics23.ICompressedExistenceProof|null} [left] CompressedNonExistenceProof left\n         * @property {ics23.ICompressedExistenceProof|null} [right] CompressedNonExistenceProof right\n         */\n\n        /**\n         * Constructs a new CompressedNonExistenceProof.\n         * @memberof ics23\n         * @classdesc Represents a CompressedNonExistenceProof.\n         * @implements ICompressedNonExistenceProof\n         * @constructor\n         * @param {ics23.ICompressedNonExistenceProof=} [properties] Properties to set\n         */\n        function CompressedNonExistenceProof(properties) {\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * CompressedNonExistenceProof key.\n         * @member {Uint8Array} key\n         * @memberof ics23.CompressedNonExistenceProof\n         * @instance\n         */\n        CompressedNonExistenceProof.prototype.key = $util.newBuffer([]);\n\n        /**\n         * CompressedNonExistenceProof left.\n         * @member {ics23.ICompressedExistenceProof|null|undefined} left\n         * @memberof ics23.CompressedNonExistenceProof\n         * @instance\n         */\n        CompressedNonExistenceProof.prototype.left = null;\n\n        /**\n         * CompressedNonExistenceProof right.\n         * @member {ics23.ICompressedExistenceProof|null|undefined} right\n         * @memberof ics23.CompressedNonExistenceProof\n         * @instance\n         */\n        CompressedNonExistenceProof.prototype.right = null;\n\n        /**\n         * Creates a new CompressedNonExistenceProof instance using the specified properties.\n         * @function create\n         * @memberof ics23.CompressedNonExistenceProof\n         * @static\n         * @param {ics23.ICompressedNonExistenceProof=} [properties] Properties to set\n         * @returns {ics23.CompressedNonExistenceProof} CompressedNonExistenceProof instance\n         */\n        CompressedNonExistenceProof.create = function create(properties) {\n            return new CompressedNonExistenceProof(properties);\n        };\n\n        /**\n         * Encodes the specified CompressedNonExistenceProof message. Does not implicitly {@link ics23.CompressedNonExistenceProof.verify|verify} messages.\n         * @function encode\n         * @memberof ics23.CompressedNonExistenceProof\n         * @static\n         * @param {ics23.ICompressedNonExistenceProof} message CompressedNonExistenceProof message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        CompressedNonExistenceProof.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.key != null && message.hasOwnProperty(\"key\"))\n                writer.uint32(/* id 1, wireType 2 =*/10).bytes(message.key);\n            if (message.left != null && message.hasOwnProperty(\"left\"))\n                $root.ics23.CompressedExistenceProof.encode(message.left, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();\n            if (message.right != null && message.hasOwnProperty(\"right\"))\n                $root.ics23.CompressedExistenceProof.encode(message.right, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();\n            return writer;\n        };\n\n        /**\n         * Encodes the specified CompressedNonExistenceProof message, length delimited. Does not implicitly {@link ics23.CompressedNonExistenceProof.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof ics23.CompressedNonExistenceProof\n         * @static\n         * @param {ics23.ICompressedNonExistenceProof} message CompressedNonExistenceProof message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        CompressedNonExistenceProof.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a CompressedNonExistenceProof message from the specified reader or buffer.\n         * @function decode\n         * @memberof ics23.CompressedNonExistenceProof\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {ics23.CompressedNonExistenceProof} CompressedNonExistenceProof\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        CompressedNonExistenceProof.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ics23.CompressedNonExistenceProof();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    message.key = reader.bytes();\n                    break;\n                case 2:\n                    message.left = $root.ics23.CompressedExistenceProof.decode(reader, reader.uint32());\n                    break;\n                case 3:\n                    message.right = $root.ics23.CompressedExistenceProof.decode(reader, reader.uint32());\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a CompressedNonExistenceProof message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof ics23.CompressedNonExistenceProof\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {ics23.CompressedNonExistenceProof} CompressedNonExistenceProof\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        CompressedNonExistenceProof.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a CompressedNonExistenceProof message.\n         * @function verify\n         * @memberof ics23.CompressedNonExistenceProof\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        CompressedNonExistenceProof.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.key != null && message.hasOwnProperty(\"key\"))\n                if (!(message.key && typeof message.key.length === \"number\" || $util.isString(message.key)))\n                    return \"key: buffer expected\";\n            if (message.left != null && message.hasOwnProperty(\"left\")) {\n                var error = $root.ics23.CompressedExistenceProof.verify(message.left);\n                if (error)\n                    return \"left.\" + error;\n            }\n            if (message.right != null && message.hasOwnProperty(\"right\")) {\n                var error = $root.ics23.CompressedExistenceProof.verify(message.right);\n                if (error)\n                    return \"right.\" + error;\n            }\n            return null;\n        };\n\n        /**\n         * Creates a CompressedNonExistenceProof message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof ics23.CompressedNonExistenceProof\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {ics23.CompressedNonExistenceProof} CompressedNonExistenceProof\n         */\n        CompressedNonExistenceProof.fromObject = function fromObject(object) {\n            if (object instanceof $root.ics23.CompressedNonExistenceProof)\n                return object;\n            var message = new $root.ics23.CompressedNonExistenceProof();\n            if (object.key != null)\n                if (typeof object.key === \"string\")\n                    $util.base64.decode(object.key, message.key = $util.newBuffer($util.base64.length(object.key)), 0);\n                else if (object.key.length)\n                    message.key = object.key;\n            if (object.left != null) {\n                if (typeof object.left !== \"object\")\n                    throw TypeError(\".ics23.CompressedNonExistenceProof.left: object expected\");\n                message.left = $root.ics23.CompressedExistenceProof.fromObject(object.left);\n            }\n            if (object.right != null) {\n                if (typeof object.right !== \"object\")\n                    throw TypeError(\".ics23.CompressedNonExistenceProof.right: object expected\");\n                message.right = $root.ics23.CompressedExistenceProof.fromObject(object.right);\n            }\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a CompressedNonExistenceProof message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof ics23.CompressedNonExistenceProof\n         * @static\n         * @param {ics23.CompressedNonExistenceProof} message CompressedNonExistenceProof\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        CompressedNonExistenceProof.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.defaults) {\n                if (options.bytes === String)\n                    object.key = \"\";\n                else {\n                    object.key = [];\n                    if (options.bytes !== Array)\n                        object.key = $util.newBuffer(object.key);\n                }\n                object.left = null;\n                object.right = null;\n            }\n            if (message.key != null && message.hasOwnProperty(\"key\"))\n                object.key = options.bytes === String ? $util.base64.encode(message.key, 0, message.key.length) : options.bytes === Array ? Array.prototype.slice.call(message.key) : message.key;\n            if (message.left != null && message.hasOwnProperty(\"left\"))\n                object.left = $root.ics23.CompressedExistenceProof.toObject(message.left, options);\n            if (message.right != null && message.hasOwnProperty(\"right\"))\n                object.right = $root.ics23.CompressedExistenceProof.toObject(message.right, options);\n            return object;\n        };\n\n        /**\n         * Converts this CompressedNonExistenceProof to JSON.\n         * @function toJSON\n         * @memberof ics23.CompressedNonExistenceProof\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        CompressedNonExistenceProof.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        return CompressedNonExistenceProof;\n    })();\n\n    return ics23;\n})();\n\nmodule.exports = $root;\n", null, null, null, null, null, null, "'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n\tvalue: true\n});\nexports['default'] = symbolObservablePonyfill;\nfunction symbolObservablePonyfill(root) {\n\tvar result;\n\tvar _Symbol = root.Symbol;\n\n\tif (typeof _Symbol === 'function') {\n\t\tif (_Symbol.observable) {\n\t\t\tresult = _Symbol.observable;\n\t\t} else {\n\n\t\t\t// This just needs to be something that won't trample other user's Symbol.for use\n\t\t\t// It also will guide people to the source of their issues, if this is problematic.\n\t\t\t// META: It's a resource locator!\n\t\t\tresult = _Symbol['for']('https://github.com/benlesh/symbol-observable');\n\t\t\ttry {\n\t\t\t\t_Symbol.observable = result;\n\t\t\t} catch (err) {\n\t\t\t\t// Do nothing. In some environments, users have frozen `Symbol` for security reasons,\n\t\t\t\t// if it is frozen assigning to it will throw. In this case, we don't care, because\n\t\t\t\t// they will need to use the returned value from the ponyfill.\n\t\t\t}\n\t\t}\n\t} else {\n\t\tresult = '@@observable';\n\t}\n\n\treturn result;\n};", "module.exports = require('./lib/ponyfill');\n", "'use strict';\n\nvar toStr = Object.prototype.toString;\n\nmodule.exports = function isArguments(value) {\n\tvar str = toStr.call(value);\n\tvar isArgs = str === '[object Arguments]';\n\tif (!isArgs) {\n\t\tisArgs = str !== '[object Array]' &&\n\t\t\tvalue !== null &&\n\t\t\ttypeof value === 'object' &&\n\t\t\ttypeof value.length === 'number' &&\n\t\t\tvalue.length >= 0 &&\n\t\t\ttoStr.call(value.callee) === '[object Function]';\n\t}\n\treturn isArgs;\n};\n", "'use strict';\n\nvar keysShim;\nif (!Object.keys) {\n\t// modified from https://github.com/es-shims/es5-shim\n\tvar has = Object.prototype.hasOwnProperty;\n\tvar toStr = Object.prototype.toString;\n\tvar isArgs = require('./isArguments'); // eslint-disable-line global-require\n\tvar isEnumerable = Object.prototype.propertyIsEnumerable;\n\tvar hasDontEnumBug = !isEnumerable.call({ toString: null }, 'toString');\n\tvar hasProtoEnumBug = isEnumerable.call(function () {}, 'prototype');\n\tvar dontEnums = [\n\t\t'toString',\n\t\t'toLocaleString',\n\t\t'valueOf',\n\t\t'hasOwnProperty',\n\t\t'isPrototypeOf',\n\t\t'propertyIsEnumerable',\n\t\t'constructor'\n\t];\n\tvar equalsConstructorPrototype = function (o) {\n\t\tvar ctor = o.constructor;\n\t\treturn ctor && ctor.prototype === o;\n\t};\n\tvar excludedKeys = {\n\t\t$applicationCache: true,\n\t\t$console: true,\n\t\t$external: true,\n\t\t$frame: true,\n\t\t$frameElement: true,\n\t\t$frames: true,\n\t\t$innerHeight: true,\n\t\t$innerWidth: true,\n\t\t$onmozfullscreenchange: true,\n\t\t$onmozfullscreenerror: true,\n\t\t$outerHeight: true,\n\t\t$outerWidth: true,\n\t\t$pageXOffset: true,\n\t\t$pageYOffset: true,\n\t\t$parent: true,\n\t\t$scrollLeft: true,\n\t\t$scrollTop: true,\n\t\t$scrollX: true,\n\t\t$scrollY: true,\n\t\t$self: true,\n\t\t$webkitIndexedDB: true,\n\t\t$webkitStorageInfo: true,\n\t\t$window: true\n\t};\n\tvar hasAutomationEqualityBug = (function () {\n\t\t/* global window */\n\t\tif (typeof window === 'undefined') { return false; }\n\t\tfor (var k in window) {\n\t\t\ttry {\n\t\t\t\tif (!excludedKeys['$' + k] && has.call(window, k) && window[k] !== null && typeof window[k] === 'object') {\n\t\t\t\t\ttry {\n\t\t\t\t\t\tequalsConstructorPrototype(window[k]);\n\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} catch (e) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}());\n\tvar equalsConstructorPrototypeIfNotBuggy = function (o) {\n\t\t/* global window */\n\t\tif (typeof window === 'undefined' || !hasAutomationEqualityBug) {\n\t\t\treturn equalsConstructorPrototype(o);\n\t\t}\n\t\ttry {\n\t\t\treturn equalsConstructorPrototype(o);\n\t\t} catch (e) {\n\t\t\treturn false;\n\t\t}\n\t};\n\n\tkeysShim = function keys(object) {\n\t\tvar isObject = object !== null && typeof object === 'object';\n\t\tvar isFunction = toStr.call(object) === '[object Function]';\n\t\tvar isArguments = isArgs(object);\n\t\tvar isString = isObject && toStr.call(object) === '[object String]';\n\t\tvar theKeys = [];\n\n\t\tif (!isObject && !isFunction && !isArguments) {\n\t\t\tthrow new TypeError('Object.keys called on a non-object');\n\t\t}\n\n\t\tvar skipProto = hasProtoEnumBug && isFunction;\n\t\tif (isString && object.length > 0 && !has.call(object, 0)) {\n\t\t\tfor (var i = 0; i < object.length; ++i) {\n\t\t\t\ttheKeys.push(String(i));\n\t\t\t}\n\t\t}\n\n\t\tif (isArguments && object.length > 0) {\n\t\t\tfor (var j = 0; j < object.length; ++j) {\n\t\t\t\ttheKeys.push(String(j));\n\t\t\t}\n\t\t} else {\n\t\t\tfor (var name in object) {\n\t\t\t\tif (!(skipProto && name === 'prototype') && has.call(object, name)) {\n\t\t\t\t\ttheKeys.push(String(name));\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (hasDontEnumBug) {\n\t\t\tvar skipConstructor = equalsConstructorPrototypeIfNotBuggy(object);\n\n\t\t\tfor (var k = 0; k < dontEnums.length; ++k) {\n\t\t\t\tif (!(skipConstructor && dontEnums[k] === 'constructor') && has.call(object, dontEnums[k])) {\n\t\t\t\t\ttheKeys.push(dontEnums[k]);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn theKeys;\n\t};\n}\nmodule.exports = keysShim;\n", "'use strict';\n\nvar slice = Array.prototype.slice;\nvar isArgs = require('./isArguments');\n\nvar origKeys = Object.keys;\nvar keysShim = origKeys ? function keys(o) { return origKeys(o); } : require('./implementation');\n\nvar originalKeys = Object.keys;\n\nkeysShim.shim = function shimObjectKeys() {\n\tif (Object.keys) {\n\t\tvar keysWorksWithArguments = (function () {\n\t\t\t// Safari 5.0 bug\n\t\t\tvar args = Object.keys(arguments);\n\t\t\treturn args && args.length === arguments.length;\n\t\t}(1, 2));\n\t\tif (!keysWorksWithArguments) {\n\t\t\tObject.keys = function keys(object) { // eslint-disable-line func-name-matching\n\t\t\t\tif (isArgs(object)) {\n\t\t\t\t\treturn originalKeys(slice.call(object));\n\t\t\t\t}\n\t\t\t\treturn originalKeys(object);\n\t\t\t};\n\t\t}\n\t} else {\n\t\tObject.keys = keysShim;\n\t}\n\treturn Object.keys || keysShim;\n};\n\nmodule.exports = keysShim;\n", "'use strict';\n\n/** @type {import('.')} */\nvar $defineProperty = Object.defineProperty || false;\nif ($defineProperty) {\n\ttry {\n\t\t$defineProperty({}, 'a', { value: 1 });\n\t} catch (e) {\n\t\t// IE 8 has a broken defineProperty\n\t\t$defineProperty = false;\n\t}\n}\n\nmodule.exports = $defineProperty;\n", "'use strict';\n\n/** @type {import('./syntax')} */\nmodule.exports = SyntaxError;\n", "'use strict';\n\n/** @type {import('./type')} */\nmodule.exports = TypeError;\n", "'use strict';\n\n/** @type {import('./shams')} */\n/* eslint complexity: [2, 18], max-statements: [2, 33] */\nmodule.exports = function hasSymbols() {\n\tif (typeof Symbol !== 'function' || typeof Object.getOwnPropertySymbols !== 'function') { return false; }\n\tif (typeof Symbol.iterator === 'symbol') { return true; }\n\n\t/** @type {{ [k in symbol]?: unknown }} */\n\tvar obj = {};\n\tvar sym = Symbol('test');\n\tvar symObj = Object(sym);\n\tif (typeof sym === 'string') { return false; }\n\n\tif (Object.prototype.toString.call(sym) !== '[object Symbol]') { return false; }\n\tif (Object.prototype.toString.call(symObj) !== '[object Symbol]') { return false; }\n\n\t// temp disabled per https://github.com/ljharb/object.assign/issues/17\n\t// if (sym instanceof Symbol) { return false; }\n\t// temp disabled per https://github.com/WebReflection/get-own-property-symbols/issues/4\n\t// if (!(symObj instanceof Symbol)) { return false; }\n\n\t// if (typeof Symbol.prototype.toString !== 'function') { return false; }\n\t// if (String(sym) !== Symbol.prototype.toString.call(sym)) { return false; }\n\n\tvar symVal = 42;\n\tobj[sym] = symVal;\n\tfor (var _ in obj) { return false; } // eslint-disable-line no-restricted-syntax, no-unreachable-loop\n\tif (typeof Object.keys === 'function' && Object.keys(obj).length !== 0) { return false; }\n\n\tif (typeof Object.getOwnPropertyNames === 'function' && Object.getOwnPropertyNames(obj).length !== 0) { return false; }\n\n\tvar syms = Object.getOwnPropertySymbols(obj);\n\tif (syms.length !== 1 || syms[0] !== sym) { return false; }\n\n\tif (!Object.prototype.propertyIsEnumerable.call(obj, sym)) { return false; }\n\n\tif (typeof Object.getOwnPropertyDescriptor === 'function') {\n\t\t// eslint-disable-next-line no-extra-parens\n\t\tvar descriptor = /** @type {PropertyDescriptor} */ (Object.getOwnPropertyDescriptor(obj, sym));\n\t\tif (descriptor.value !== symVal || descriptor.enumerable !== true) { return false; }\n\t}\n\n\treturn true;\n};\n", "'use strict';\n\nvar origSymbol = typeof Symbol !== 'undefined' && Symbol;\nvar hasSymbolSham = require('./shams');\n\n/** @type {import('.')} */\nmodule.exports = function hasNativeSymbols() {\n\tif (typeof origSymbol !== 'function') { return false; }\n\tif (typeof Symbol !== 'function') { return false; }\n\tif (typeof origSymbol('foo') !== 'symbol') { return false; }\n\tif (typeof Symbol('bar') !== 'symbol') { return false; }\n\n\treturn hasSymbolSham();\n};\n", "'use strict';\n\nvar test = {\n\t__proto__: null,\n\tfoo: {}\n};\n\n// @ts-expect-error: TS errors on an inherited property for some reason\nvar result = { __proto__: test }.foo === test.foo\n\t&& !(test instanceof Object);\n\n/** @type {import('.')} */\nmodule.exports = function hasProto() {\n\treturn result;\n};\n", "'use strict';\n\n/* eslint no-invalid-this: 1 */\n\nvar ERROR_MESSAGE = 'Function.prototype.bind called on incompatible ';\nvar toStr = Object.prototype.toString;\nvar max = Math.max;\nvar funcType = '[object Function]';\n\nvar concatty = function concatty(a, b) {\n    var arr = [];\n\n    for (var i = 0; i < a.length; i += 1) {\n        arr[i] = a[i];\n    }\n    for (var j = 0; j < b.length; j += 1) {\n        arr[j + a.length] = b[j];\n    }\n\n    return arr;\n};\n\nvar slicy = function slicy(arrLike, offset) {\n    var arr = [];\n    for (var i = offset || 0, j = 0; i < arrLike.length; i += 1, j += 1) {\n        arr[j] = arrLike[i];\n    }\n    return arr;\n};\n\nvar joiny = function (arr, joiner) {\n    var str = '';\n    for (var i = 0; i < arr.length; i += 1) {\n        str += arr[i];\n        if (i + 1 < arr.length) {\n            str += joiner;\n        }\n    }\n    return str;\n};\n\nmodule.exports = function bind(that) {\n    var target = this;\n    if (typeof target !== 'function' || toStr.apply(target) !== funcType) {\n        throw new TypeError(ERROR_MESSAGE + target);\n    }\n    var args = slicy(arguments, 1);\n\n    var bound;\n    var binder = function () {\n        if (this instanceof bound) {\n            var result = target.apply(\n                this,\n                concatty(args, arguments)\n            );\n            if (Object(result) === result) {\n                return result;\n            }\n            return this;\n        }\n        return target.apply(\n            that,\n            concatty(args, arguments)\n        );\n\n    };\n\n    var boundLength = max(0, target.length - args.length);\n    var boundArgs = [];\n    for (var i = 0; i < boundLength; i++) {\n        boundArgs[i] = '$' + i;\n    }\n\n    bound = Function('binder', 'return function (' + joiny(boundArgs, ',') + '){ return binder.apply(this,arguments); }')(binder);\n\n    if (target.prototype) {\n        var Empty = function Empty() {};\n        Empty.prototype = target.prototype;\n        bound.prototype = new Empty();\n        Empty.prototype = null;\n    }\n\n    return bound;\n};\n", "'use strict';\n\nvar implementation = require('./implementation');\n\nmodule.exports = Function.prototype.bind || implementation;\n", "'use strict';\n\nvar hasOwnProperty = {}.hasOwnProperty;\nvar call = Function.prototype.call;\n\nmodule.exports = call.bind ? call.bind(hasOwnProperty) : function (O, P) {\n  return call.call(hasOwnProperty, O, P);\n};\n", "'use strict';\n\nvar undefined;\n\nvar $SyntaxError = SyntaxError;\nvar $Function = Function;\nvar $TypeError = TypeError;\n\n// eslint-disable-next-line consistent-return\nvar getEvalledConstructor = function (expressionSyntax) {\n\ttry {\n\t\treturn $Function('\"use strict\"; return (' + expressionSyntax + ').constructor;')();\n\t} catch (e) {}\n};\n\nvar $gOPD = Object.getOwnPropertyDescriptor;\nif ($gOPD) {\n\ttry {\n\t\t$gOPD({}, '');\n\t} catch (e) {\n\t\t$gOPD = null; // this is IE 8, which has a broken gOPD\n\t}\n}\n\nvar throwTypeError = function () {\n\tthrow new $TypeError();\n};\nvar ThrowTypeError = $gOPD\n\t? (function () {\n\t\ttry {\n\t\t\t// eslint-disable-next-line no-unused-expressions, no-caller, no-restricted-properties\n\t\t\targuments.callee; // IE 8 does not throw here\n\t\t\treturn throwTypeError;\n\t\t} catch (calleeThrows) {\n\t\t\ttry {\n\t\t\t\t// IE 8 throws on Object.getOwnPropertyDescriptor(arguments, '')\n\t\t\t\treturn $gOPD(arguments, 'callee').get;\n\t\t\t} catch (gOPDthrows) {\n\t\t\t\treturn throwTypeError;\n\t\t\t}\n\t\t}\n\t}())\n\t: throwTypeError;\n\nvar hasSymbols = require('has-symbols')();\nvar hasProto = require('has-proto')();\n\nvar getProto = Object.getPrototypeOf || (\n\thasProto\n\t\t? function (x) { return x.__proto__; } // eslint-disable-line no-proto\n\t\t: null\n);\n\nvar needsEval = {};\n\nvar TypedArray = typeof Uint8Array === 'undefined' || !getProto ? undefined : getProto(Uint8Array);\n\nvar INTRINSICS = {\n\t'%AggregateError%': typeof AggregateError === 'undefined' ? undefined : AggregateError,\n\t'%Array%': Array,\n\t'%ArrayBuffer%': typeof ArrayBuffer === 'undefined' ? undefined : ArrayBuffer,\n\t'%ArrayIteratorPrototype%': hasSymbols && getProto ? getProto([][Symbol.iterator]()) : undefined,\n\t'%AsyncFromSyncIteratorPrototype%': undefined,\n\t'%AsyncFunction%': needsEval,\n\t'%AsyncGenerator%': needsEval,\n\t'%AsyncGeneratorFunction%': needsEval,\n\t'%AsyncIteratorPrototype%': needsEval,\n\t'%Atomics%': typeof Atomics === 'undefined' ? undefined : Atomics,\n\t'%BigInt%': typeof BigInt === 'undefined' ? undefined : BigInt,\n\t'%BigInt64Array%': typeof BigInt64Array === 'undefined' ? undefined : BigInt64Array,\n\t'%BigUint64Array%': typeof BigUint64Array === 'undefined' ? undefined : BigUint64Array,\n\t'%Boolean%': Boolean,\n\t'%DataView%': typeof DataView === 'undefined' ? undefined : DataView,\n\t'%Date%': Date,\n\t'%decodeURI%': decodeURI,\n\t'%decodeURIComponent%': decodeURIComponent,\n\t'%encodeURI%': encodeURI,\n\t'%encodeURIComponent%': encodeURIComponent,\n\t'%Error%': Error,\n\t'%eval%': eval, // eslint-disable-line no-eval\n\t'%EvalError%': EvalError,\n\t'%Float32Array%': typeof Float32Array === 'undefined' ? undefined : Float32Array,\n\t'%Float64Array%': typeof Float64Array === 'undefined' ? undefined : Float64Array,\n\t'%FinalizationRegistry%': typeof FinalizationRegistry === 'undefined' ? undefined : FinalizationRegistry,\n\t'%Function%': $Function,\n\t'%GeneratorFunction%': needsEval,\n\t'%Int8Array%': typeof Int8Array === 'undefined' ? undefined : Int8Array,\n\t'%Int16Array%': typeof Int16Array === 'undefined' ? undefined : Int16Array,\n\t'%Int32Array%': typeof Int32Array === 'undefined' ? undefined : Int32Array,\n\t'%isFinite%': isFinite,\n\t'%isNaN%': isNaN,\n\t'%IteratorPrototype%': hasSymbols && getProto ? getProto(getProto([][Symbol.iterator]())) : undefined,\n\t'%JSON%': typeof JSON === 'object' ? JSON : undefined,\n\t'%Map%': typeof Map === 'undefined' ? undefined : Map,\n\t'%MapIteratorPrototype%': typeof Map === 'undefined' || !hasSymbols || !getProto ? undefined : getProto(new Map()[Symbol.iterator]()),\n\t'%Math%': Math,\n\t'%Number%': Number,\n\t'%Object%': Object,\n\t'%parseFloat%': parseFloat,\n\t'%parseInt%': parseInt,\n\t'%Promise%': typeof Promise === 'undefined' ? undefined : Promise,\n\t'%Proxy%': typeof Proxy === 'undefined' ? undefined : Proxy,\n\t'%RangeError%': RangeError,\n\t'%ReferenceError%': ReferenceError,\n\t'%Reflect%': typeof Reflect === 'undefined' ? undefined : Reflect,\n\t'%RegExp%': RegExp,\n\t'%Set%': typeof Set === 'undefined' ? undefined : Set,\n\t'%SetIteratorPrototype%': typeof Set === 'undefined' || !hasSymbols || !getProto ? undefined : getProto(new Set()[Symbol.iterator]()),\n\t'%SharedArrayBuffer%': typeof SharedArrayBuffer === 'undefined' ? undefined : SharedArrayBuffer,\n\t'%String%': String,\n\t'%StringIteratorPrototype%': hasSymbols && getProto ? getProto(''[Symbol.iterator]()) : undefined,\n\t'%Symbol%': hasSymbols ? Symbol : undefined,\n\t'%SyntaxError%': $SyntaxError,\n\t'%ThrowTypeError%': ThrowTypeError,\n\t'%TypedArray%': TypedArray,\n\t'%TypeError%': $TypeError,\n\t'%Uint8Array%': typeof Uint8Array === 'undefined' ? undefined : Uint8Array,\n\t'%Uint8ClampedArray%': typeof Uint8ClampedArray === 'undefined' ? undefined : Uint8ClampedArray,\n\t'%Uint16Array%': typeof Uint16Array === 'undefined' ? undefined : Uint16Array,\n\t'%Uint32Array%': typeof Uint32Array === 'undefined' ? undefined : Uint32Array,\n\t'%URIError%': URIError,\n\t'%WeakMap%': typeof WeakMap === 'undefined' ? undefined : WeakMap,\n\t'%WeakRef%': typeof WeakRef === 'undefined' ? undefined : WeakRef,\n\t'%WeakSet%': typeof WeakSet === 'undefined' ? undefined : WeakSet\n};\n\nif (getProto) {\n\ttry {\n\t\tnull.error; // eslint-disable-line no-unused-expressions\n\t} catch (e) {\n\t\t// https://github.com/tc39/proposal-shadowrealm/pull/384#issuecomment-1364264229\n\t\tvar errorProto = getProto(getProto(e));\n\t\tINTRINSICS['%Error.prototype%'] = errorProto;\n\t}\n}\n\nvar doEval = function doEval(name) {\n\tvar value;\n\tif (name === '%AsyncFunction%') {\n\t\tvalue = getEvalledConstructor('async function () {}');\n\t} else if (name === '%GeneratorFunction%') {\n\t\tvalue = getEvalledConstructor('function* () {}');\n\t} else if (name === '%AsyncGeneratorFunction%') {\n\t\tvalue = getEvalledConstructor('async function* () {}');\n\t} else if (name === '%AsyncGenerator%') {\n\t\tvar fn = doEval('%AsyncGeneratorFunction%');\n\t\tif (fn) {\n\t\t\tvalue = fn.prototype;\n\t\t}\n\t} else if (name === '%AsyncIteratorPrototype%') {\n\t\tvar gen = doEval('%AsyncGenerator%');\n\t\tif (gen && getProto) {\n\t\t\tvalue = getProto(gen.prototype);\n\t\t}\n\t}\n\n\tINTRINSICS[name] = value;\n\n\treturn value;\n};\n\nvar LEGACY_ALIASES = {\n\t'%ArrayBufferPrototype%': ['ArrayBuffer', 'prototype'],\n\t'%ArrayPrototype%': ['Array', 'prototype'],\n\t'%ArrayProto_entries%': ['Array', 'prototype', 'entries'],\n\t'%ArrayProto_forEach%': ['Array', 'prototype', 'forEach'],\n\t'%ArrayProto_keys%': ['Array', 'prototype', 'keys'],\n\t'%ArrayProto_values%': ['Array', 'prototype', 'values'],\n\t'%AsyncFunctionPrototype%': ['AsyncFunction', 'prototype'],\n\t'%AsyncGenerator%': ['AsyncGeneratorFunction', 'prototype'],\n\t'%AsyncGeneratorPrototype%': ['AsyncGeneratorFunction', 'prototype', 'prototype'],\n\t'%BooleanPrototype%': ['Boolean', 'prototype'],\n\t'%DataViewPrototype%': ['DataView', 'prototype'],\n\t'%DatePrototype%': ['Date', 'prototype'],\n\t'%ErrorPrototype%': ['Error', 'prototype'],\n\t'%EvalErrorPrototype%': ['EvalError', 'prototype'],\n\t'%Float32ArrayPrototype%': ['Float32Array', 'prototype'],\n\t'%Float64ArrayPrototype%': ['Float64Array', 'prototype'],\n\t'%FunctionPrototype%': ['Function', 'prototype'],\n\t'%Generator%': ['GeneratorFunction', 'prototype'],\n\t'%GeneratorPrototype%': ['GeneratorFunction', 'prototype', 'prototype'],\n\t'%Int8ArrayPrototype%': ['Int8Array', 'prototype'],\n\t'%Int16ArrayPrototype%': ['Int16Array', 'prototype'],\n\t'%Int32ArrayPrototype%': ['Int32Array', 'prototype'],\n\t'%JSONParse%': ['JSON', 'parse'],\n\t'%JSONStringify%': ['JSON', 'stringify'],\n\t'%MapPrototype%': ['Map', 'prototype'],\n\t'%NumberPrototype%': ['Number', 'prototype'],\n\t'%ObjectPrototype%': ['Object', 'prototype'],\n\t'%ObjProto_toString%': ['Object', 'prototype', 'toString'],\n\t'%ObjProto_valueOf%': ['Object', 'prototype', 'valueOf'],\n\t'%PromisePrototype%': ['Promise', 'prototype'],\n\t'%PromiseProto_then%': ['Promise', 'prototype', 'then'],\n\t'%Promise_all%': ['Promise', 'all'],\n\t'%Promise_reject%': ['Promise', 'reject'],\n\t'%Promise_resolve%': ['Promise', 'resolve'],\n\t'%RangeErrorPrototype%': ['RangeError', 'prototype'],\n\t'%ReferenceErrorPrototype%': ['ReferenceError', 'prototype'],\n\t'%RegExpPrototype%': ['RegExp', 'prototype'],\n\t'%SetPrototype%': ['Set', 'prototype'],\n\t'%SharedArrayBufferPrototype%': ['SharedArrayBuffer', 'prototype'],\n\t'%StringPrototype%': ['String', 'prototype'],\n\t'%SymbolPrototype%': ['Symbol', 'prototype'],\n\t'%SyntaxErrorPrototype%': ['SyntaxError', 'prototype'],\n\t'%TypedArrayPrototype%': ['TypedArray', 'prototype'],\n\t'%TypeErrorPrototype%': ['TypeError', 'prototype'],\n\t'%Uint8ArrayPrototype%': ['Uint8Array', 'prototype'],\n\t'%Uint8ClampedArrayPrototype%': ['Uint8ClampedArray', 'prototype'],\n\t'%Uint16ArrayPrototype%': ['Uint16Array', 'prototype'],\n\t'%Uint32ArrayPrototype%': ['Uint32Array', 'prototype'],\n\t'%URIErrorPrototype%': ['URIError', 'prototype'],\n\t'%WeakMapPrototype%': ['WeakMap', 'prototype'],\n\t'%WeakSetPrototype%': ['WeakSet', 'prototype']\n};\n\nvar bind = require('function-bind');\nvar hasOwn = require('has');\nvar $concat = bind.call(Function.call, Array.prototype.concat);\nvar $spliceApply = bind.call(Function.apply, Array.prototype.splice);\nvar $replace = bind.call(Function.call, String.prototype.replace);\nvar $strSlice = bind.call(Function.call, String.prototype.slice);\nvar $exec = bind.call(Function.call, RegExp.prototype.exec);\n\n/* adapted from https://github.com/lodash/lodash/blob/4.17.15/dist/lodash.js#L6735-L6744 */\nvar rePropName = /[^%.[\\]]+|\\[(?:(-?\\d+(?:\\.\\d+)?)|([\"'])((?:(?!\\2)[^\\\\]|\\\\.)*?)\\2)\\]|(?=(?:\\.|\\[\\])(?:\\.|\\[\\]|%$))/g;\nvar reEscapeChar = /\\\\(\\\\)?/g; /** Used to match backslashes in property paths. */\nvar stringToPath = function stringToPath(string) {\n\tvar first = $strSlice(string, 0, 1);\n\tvar last = $strSlice(string, -1);\n\tif (first === '%' && last !== '%') {\n\t\tthrow new $SyntaxError('invalid intrinsic syntax, expected closing `%`');\n\t} else if (last === '%' && first !== '%') {\n\t\tthrow new $SyntaxError('invalid intrinsic syntax, expected opening `%`');\n\t}\n\tvar result = [];\n\t$replace(string, rePropName, function (match, number, quote, subString) {\n\t\tresult[result.length] = quote ? $replace(subString, reEscapeChar, '$1') : number || match;\n\t});\n\treturn result;\n};\n/* end adaptation */\n\nvar getBaseIntrinsic = function getBaseIntrinsic(name, allowMissing) {\n\tvar intrinsicName = name;\n\tvar alias;\n\tif (hasOwn(LEGACY_ALIASES, intrinsicName)) {\n\t\talias = LEGACY_ALIASES[intrinsicName];\n\t\tintrinsicName = '%' + alias[0] + '%';\n\t}\n\n\tif (hasOwn(INTRINSICS, intrinsicName)) {\n\t\tvar value = INTRINSICS[intrinsicName];\n\t\tif (value === needsEval) {\n\t\t\tvalue = doEval(intrinsicName);\n\t\t}\n\t\tif (typeof value === 'undefined' && !allowMissing) {\n\t\t\tthrow new $TypeError('intrinsic ' + name + ' exists, but is not available. Please file an issue!');\n\t\t}\n\n\t\treturn {\n\t\t\talias: alias,\n\t\t\tname: intrinsicName,\n\t\t\tvalue: value\n\t\t};\n\t}\n\n\tthrow new $SyntaxError('intrinsic ' + name + ' does not exist!');\n};\n\nmodule.exports = function GetIntrinsic(name, allowMissing) {\n\tif (typeof name !== 'string' || name.length === 0) {\n\t\tthrow new $TypeError('intrinsic name must be a non-empty string');\n\t}\n\tif (arguments.length > 1 && typeof allowMissing !== 'boolean') {\n\t\tthrow new $TypeError('\"allowMissing\" argument must be a boolean');\n\t}\n\n\tif ($exec(/^%?[^%]*%?$/, name) === null) {\n\t\tthrow new $SyntaxError('`%` may not be present anywhere but at the beginning and end of the intrinsic name');\n\t}\n\tvar parts = stringToPath(name);\n\tvar intrinsicBaseName = parts.length > 0 ? parts[0] : '';\n\n\tvar intrinsic = getBaseIntrinsic('%' + intrinsicBaseName + '%', allowMissing);\n\tvar intrinsicRealName = intrinsic.name;\n\tvar value = intrinsic.value;\n\tvar skipFurtherCaching = false;\n\n\tvar alias = intrinsic.alias;\n\tif (alias) {\n\t\tintrinsicBaseName = alias[0];\n\t\t$spliceApply(parts, $concat([0, 1], alias));\n\t}\n\n\tfor (var i = 1, isOwn = true; i < parts.length; i += 1) {\n\t\tvar part = parts[i];\n\t\tvar first = $strSlice(part, 0, 1);\n\t\tvar last = $strSlice(part, -1);\n\t\tif (\n\t\t\t(\n\t\t\t\t(first === '\"' || first === \"'\" || first === '`')\n\t\t\t\t|| (last === '\"' || last === \"'\" || last === '`')\n\t\t\t)\n\t\t\t&& first !== last\n\t\t) {\n\t\t\tthrow new $SyntaxError('property names with quotes must have matching quotes');\n\t\t}\n\t\tif (part === 'constructor' || !isOwn) {\n\t\t\tskipFurtherCaching = true;\n\t\t}\n\n\t\tintrinsicBaseName += '.' + part;\n\t\tintrinsicRealName = '%' + intrinsicBaseName + '%';\n\n\t\tif (hasOwn(INTRINSICS, intrinsicRealName)) {\n\t\t\tvalue = INTRINSICS[intrinsicRealName];\n\t\t} else if (value != null) {\n\t\t\tif (!(part in value)) {\n\t\t\t\tif (!allowMissing) {\n\t\t\t\t\tthrow new $TypeError('base intrinsic for ' + name + ' exists, but the property is not available.');\n\t\t\t\t}\n\t\t\t\treturn void undefined;\n\t\t\t}\n\t\t\tif ($gOPD && (i + 1) >= parts.length) {\n\t\t\t\tvar desc = $gOPD(value, part);\n\t\t\t\tisOwn = !!desc;\n\n\t\t\t\t// By convention, when a data property is converted to an accessor\n\t\t\t\t// property to emulate a data property that does not suffer from\n\t\t\t\t// the override mistake, that accessor's getter is marked with\n\t\t\t\t// an `originalValue` property. Here, when we detect this, we\n\t\t\t\t// uphold the illusion by pretending to see that original data\n\t\t\t\t// property, i.e., returning the value rather than the getter\n\t\t\t\t// itself.\n\t\t\t\tif (isOwn && 'get' in desc && !('originalValue' in desc.get)) {\n\t\t\t\t\tvalue = desc.get;\n\t\t\t\t} else {\n\t\t\t\t\tvalue = value[part];\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tisOwn = hasOwn(value, part);\n\t\t\t\tvalue = value[part];\n\t\t\t}\n\n\t\t\tif (isOwn && !skipFurtherCaching) {\n\t\t\t\tINTRINSICS[intrinsicRealName] = value;\n\t\t\t}\n\t\t}\n\t}\n\treturn value;\n};\n", "'use strict';\n\nvar GetIntrinsic = require('get-intrinsic');\n\nvar $gOPD = GetIntrinsic('%Object.getOwnPropertyDescriptor%', true);\n\nif ($gOPD) {\n\ttry {\n\t\t$gOPD([], 'length');\n\t} catch (e) {\n\t\t// IE 8 has a broken gOPD\n\t\t$gOPD = null;\n\t}\n}\n\nmodule.exports = $gOPD;\n", "'use strict';\n\nvar $defineProperty = require('es-define-property');\n\nvar $SyntaxError = require('es-errors/syntax');\nvar $TypeError = require('es-errors/type');\n\nvar gopd = require('gopd');\n\n/** @type {import('.')} */\nmodule.exports = function defineDataProperty(\n\tobj,\n\tproperty,\n\tvalue\n) {\n\tif (!obj || (typeof obj !== 'object' && typeof obj !== 'function')) {\n\t\tthrow new $TypeError('`obj` must be an object or a function`');\n\t}\n\tif (typeof property !== 'string' && typeof property !== 'symbol') {\n\t\tthrow new $TypeError('`property` must be a string or a symbol`');\n\t}\n\tif (arguments.length > 3 && typeof arguments[3] !== 'boolean' && arguments[3] !== null) {\n\t\tthrow new $TypeError('`nonEnumerable`, if provided, must be a boolean or null');\n\t}\n\tif (arguments.length > 4 && typeof arguments[4] !== 'boolean' && arguments[4] !== null) {\n\t\tthrow new $TypeError('`nonWritable`, if provided, must be a boolean or null');\n\t}\n\tif (arguments.length > 5 && typeof arguments[5] !== 'boolean' && arguments[5] !== null) {\n\t\tthrow new $TypeError('`nonConfigurable`, if provided, must be a boolean or null');\n\t}\n\tif (arguments.length > 6 && typeof arguments[6] !== 'boolean') {\n\t\tthrow new $TypeError('`loose`, if provided, must be a boolean');\n\t}\n\n\tvar nonEnumerable = arguments.length > 3 ? arguments[3] : null;\n\tvar nonWritable = arguments.length > 4 ? arguments[4] : null;\n\tvar nonConfigurable = arguments.length > 5 ? arguments[5] : null;\n\tvar loose = arguments.length > 6 ? arguments[6] : false;\n\n\t/* @type {false | TypedPropertyDescriptor<unknown>} */\n\tvar desc = !!gopd && gopd(obj, property);\n\n\tif ($defineProperty) {\n\t\t$defineProperty(obj, property, {\n\t\t\tconfigurable: nonConfigurable === null && desc ? desc.configurable : !nonConfigurable,\n\t\t\tenumerable: nonEnumerable === null && desc ? desc.enumerable : !nonEnumerable,\n\t\t\tvalue: value,\n\t\t\twritable: nonWritable === null && desc ? desc.writable : !nonWritable\n\t\t});\n\t} else if (loose || (!nonEnumerable && !nonWritable && !nonConfigurable)) {\n\t\t// must fall back to [[Set]], and was not explicitly asked to make non-enumerable, non-writable, or non-configurable\n\t\tobj[property] = value; // eslint-disable-line no-param-reassign\n\t} else {\n\t\tthrow new $SyntaxError('This environment does not support defining a property as non-configurable, non-writable, or non-enumerable.');\n\t}\n};\n", "'use strict';\n\nvar $defineProperty = require('es-define-property');\n\nvar hasPropertyDescriptors = function hasPropertyDescriptors() {\n\treturn !!$defineProperty;\n};\n\nhasPropertyDescriptors.hasArrayLengthDefineBug = function hasArrayLengthDefineBug() {\n\t// node v0.6 has a bug where array lengths can be Set but not Defined\n\tif (!$defineProperty) {\n\t\treturn null;\n\t}\n\ttry {\n\t\treturn $defineProperty([], 'length', { value: 1 }).length !== 1;\n\t} catch (e) {\n\t\t// In Firefox 4-22, defining length on an array throws an exception.\n\t\treturn true;\n\t}\n};\n\nmodule.exports = hasPropertyDescriptors;\n", "'use strict';\n\nvar keys = require('object-keys');\nvar hasSymbols = typeof Symbol === 'function' && typeof Symbol('foo') === 'symbol';\n\nvar toStr = Object.prototype.toString;\nvar concat = Array.prototype.concat;\nvar defineDataProperty = require('define-data-property');\n\nvar isFunction = function (fn) {\n\treturn typeof fn === 'function' && toStr.call(fn) === '[object Function]';\n};\n\nvar supportsDescriptors = require('has-property-descriptors')();\n\nvar defineProperty = function (object, name, value, predicate) {\n\tif (name in object) {\n\t\tif (predicate === true) {\n\t\t\tif (object[name] === value) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t} else if (!isFunction(predicate) || !predicate()) {\n\t\t\treturn;\n\t\t}\n\t}\n\n\tif (supportsDescriptors) {\n\t\tdefineDataProperty(object, name, value, true);\n\t} else {\n\t\tdefineDataProperty(object, name, value);\n\t}\n};\n\nvar defineProperties = function (object, map) {\n\tvar predicates = arguments.length > 2 ? arguments[2] : {};\n\tvar props = keys(map);\n\tif (hasSymbols) {\n\t\tprops = concat.call(props, Object.getOwnPropertySymbols(map));\n\t}\n\tfor (var i = 0; i < props.length; i += 1) {\n\t\tdefineProperty(object, props[i], map[props[i]], predicates[props[i]]);\n\t}\n};\n\ndefineProperties.supportsDescriptors = !!supportsDescriptors;\n\nmodule.exports = defineProperties;\n", "/* eslint no-negated-condition: 0, no-new-func: 0 */\n\n'use strict';\n\nif (typeof self !== 'undefined') {\n\tmodule.exports = self;\n} else if (typeof window !== 'undefined') {\n\tmodule.exports = window;\n} else {\n\tmodule.exports = Function('return this')();\n}\n", "'use strict';\n\nvar implementation = require('./implementation');\n\nmodule.exports = function getPolyfill() {\n\tif (typeof global !== 'object' || !global || global.Math !== Math || global.Array !== Array) {\n\t\treturn implementation;\n\t}\n\treturn global;\n};\n", "'use strict';\n\nvar define = require('define-properties');\nvar gOPD = require('gopd');\nvar getPolyfill = require('./polyfill');\n\nmodule.exports = function shimGlobal() {\n\tvar polyfill = getPolyfill();\n\tif (define.supportsDescriptors) {\n\t\tvar descriptor = gOPD(polyfill, 'globalThis');\n\t\tif (\n\t\t\t!descriptor\n\t\t\t|| (\n\t\t\t\tdescriptor.configurable\n\t\t\t\t&& (descriptor.enumerable || !descriptor.writable || globalThis !== polyfill)\n\t\t\t)\n\t\t) {\n\t\t\tObject.defineProperty(polyfill, 'globalThis', {\n\t\t\t\tconfigurable: true,\n\t\t\t\tenumerable: false,\n\t\t\t\tvalue: polyfill,\n\t\t\t\twritable: true\n\t\t\t});\n\t\t}\n\t} else if (typeof globalThis !== 'object' || globalThis !== polyfill) {\n\t\tpolyfill.globalThis = polyfill;\n\t}\n\treturn polyfill;\n};\n", "'use strict';\n\nvar defineProperties = require('define-properties');\n\nvar implementation = require('./implementation');\nvar getPolyfill = require('./polyfill');\nvar shim = require('./shim');\n\nvar polyfill = getPolyfill();\n\nvar getGlobal = function () { return polyfill; };\n\ndefineProperties(getGlobal, {\n\tgetPolyfill: getPolyfill,\n\timplementation: implementation,\n\tshim: shim\n});\n\nmodule.exports = getGlobal;\n", "import ponyfillSymbolObservable from 'symbol-observable/ponyfill';\nimport { getPolyfill as getGlobalThis } from 'globalthis';\n\nconst $$observable = ponyfillSymbolObservable(getGlobalThis());\n\nconst NO = {};\nfunction noop() { }\n\nfunction cp<T>(a: Array<T>): Array<T> {\n  const l = a.length;\n  const b = Array(l);\n  for (let i = 0; i < l; ++i) b[i] = a[i];\n  return b;\n}\n\nfunction and<T>(f1: (t: T) => boolean, f2: (t: T) => boolean): (t: T) => boolean {\n  return function andFn(t: T): boolean {\n    return f1(t) && f2(t);\n  };\n}\n\ninterface FContainer<T, R> {\n  f(t: T): R;\n}\n\nfunction _try<T, R>(c: FContainer<T, R>, t: T, u: Stream<any>): R | {} {\n  try {\n    return c.f(t);\n  } catch (e) {\n    u._e(e);\n    return NO;\n  }\n}\n\nexport interface InternalListener<T> {\n  _n: (v: T) => void;\n  _e: (err: any) => void;\n  _c: () => void;\n}\n\nconst NO_IL: InternalListener<any> = {\n  _n: noop,\n  _e: noop,\n  _c: noop,\n};\n\nexport interface InternalProducer<T> {\n  _start(listener: InternalListener<T>): void;\n  _stop: () => void;\n}\n\nexport interface OutSender<T> {\n  out: Stream<T>;\n}\n\nexport interface Operator<T, R> extends InternalProducer<R>, InternalListener<T>, OutSender<R> {\n  type: string;\n  ins: Stream<T>;\n  _start(out: Stream<R>): void;\n}\n\nexport interface Aggregator<T, U> extends InternalProducer<U>, OutSender<U> {\n  type: string;\n  insArr: Array<Stream<T>>;\n  _start(out: Stream<U>): void;\n}\n\nexport interface Producer<T> {\n  start: (listener: Listener<T>) => void;\n  stop: () => void;\n}\n\nexport interface Listener<T> {\n  next: (x: T) => void;\n  error: (err: any) => void;\n  complete: () => void;\n}\n\nexport interface Subscription {\n  unsubscribe(): void;\n}\n\nexport interface Observable<T> {\n  subscribe(listener: Listener<T>): Subscription;\n}\n\n// mutates the input\nfunction internalizeProducer<T>(producer: Producer<T> & Partial<InternalProducer<T>>) {\n  producer._start = function _start(il: InternalListener<T> & Partial<Listener<T>>) {\n    il.next = il._n;\n    il.error = il._e;\n    il.complete = il._c;\n    this.start(il as Listener<T>);\n  };\n  producer._stop = producer.stop;\n}\n\nclass StreamSub<T> implements Subscription {\n  constructor(private _stream: Stream<T>, private _listener: InternalListener<T>) { }\n\n  unsubscribe(): void {\n    this._stream._remove(this._listener);\n  }\n}\n\nclass Observer<T> implements Listener<T> {\n  constructor(private _listener: InternalListener<T>) { }\n\n  next(value: T) {\n    this._listener._n(value);\n  }\n\n  error(err: any) {\n    this._listener._e(err);\n  }\n\n  complete() {\n    this._listener._c();\n  }\n}\n\nclass FromObservable<T> implements InternalProducer<T> {\n  public type = 'fromObservable';\n  public ins: Observable<T>;\n  public out?: Stream<T>;\n  private active: boolean;\n  private _sub: Subscription | undefined;\n\n  constructor(observable: Observable<T>) {\n    this.ins = observable;\n    this.active = false;\n  }\n\n  _start(out: Stream<T>) {\n    this.out = out;\n    this.active = true;\n    this._sub = this.ins.subscribe(new Observer(out));\n    if (!this.active) this._sub.unsubscribe();\n  }\n\n  _stop() {\n    if (this._sub) this._sub.unsubscribe();\n    this.active = false;\n  }\n}\n\nexport interface MergeSignature {\n  (): Stream<any>;\n  <T1>(s1: Stream<T1>): Stream<T1>;\n  <T1, T2>(\n    s1: Stream<T1>,\n    s2: Stream<T2>): Stream<T1 | T2>;\n  <T1, T2, T3>(\n    s1: Stream<T1>,\n    s2: Stream<T2>,\n    s3: Stream<T3>): Stream<T1 | T2 | T3>;\n  <T1, T2, T3, T4>(\n    s1: Stream<T1>,\n    s2: Stream<T2>,\n    s3: Stream<T3>,\n    s4: Stream<T4>): Stream<T1 | T2 | T3 | T4>;\n  <T1, T2, T3, T4, T5>(\n    s1: Stream<T1>,\n    s2: Stream<T2>,\n    s3: Stream<T3>,\n    s4: Stream<T4>,\n    s5: Stream<T5>): Stream<T1 | T2 | T3 | T4 | T5>;\n  <T1, T2, T3, T4, T5, T6>(\n    s1: Stream<T1>,\n    s2: Stream<T2>,\n    s3: Stream<T3>,\n    s4: Stream<T4>,\n    s5: Stream<T5>,\n    s6: Stream<T6>): Stream<T1 | T2 | T3 | T4 | T5 | T6>;\n  <T1, T2, T3, T4, T5, T6, T7>(\n    s1: Stream<T1>,\n    s2: Stream<T2>,\n    s3: Stream<T3>,\n    s4: Stream<T4>,\n    s5: Stream<T5>,\n    s6: Stream<T6>,\n    s7: Stream<T7>): Stream<T1 | T2 | T3 | T4 | T5 | T6 | T7>;\n  <T1, T2, T3, T4, T5, T6, T7, T8>(\n    s1: Stream<T1>,\n    s2: Stream<T2>,\n    s3: Stream<T3>,\n    s4: Stream<T4>,\n    s5: Stream<T5>,\n    s6: Stream<T6>,\n    s7: Stream<T7>,\n    s8: Stream<T8>): Stream<T1 | T2 | T3 | T4 | T5 | T6 | T7 | T8>;\n  <T1, T2, T3, T4, T5, T6, T7, T8, T9>(\n    s1: Stream<T1>,\n    s2: Stream<T2>,\n    s3: Stream<T3>,\n    s4: Stream<T4>,\n    s5: Stream<T5>,\n    s6: Stream<T6>,\n    s7: Stream<T7>,\n    s8: Stream<T8>,\n    s9: Stream<T9>): Stream<T1 | T2 | T3 | T4 | T5 | T6 | T7 | T8 | T9>;\n  <T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>(\n    s1: Stream<T1>,\n    s2: Stream<T2>,\n    s3: Stream<T3>,\n    s4: Stream<T4>,\n    s5: Stream<T5>,\n    s6: Stream<T6>,\n    s7: Stream<T7>,\n    s8: Stream<T8>,\n    s9: Stream<T9>,\n    s10: Stream<T10>): Stream<T1 | T2 | T3 | T4 | T5 | T6 | T7 | T8 | T9 | T10>;\n  <T>(...stream: Array<Stream<T>>): Stream<T>;\n}\n\nclass Merge<T> implements Aggregator<T, T>, InternalListener<T> {\n  public type = 'merge';\n  public insArr: Array<Stream<T>>;\n  public out: Stream<T>;\n  private ac: number; // ac is activeCount\n\n  constructor(insArr: Array<Stream<T>>) {\n    this.insArr = insArr;\n    this.out = NO as Stream<T>;\n    this.ac = 0;\n  }\n\n  _start(out: Stream<T>): void {\n    this.out = out;\n    const s = this.insArr;\n    const L = s.length;\n    this.ac = L;\n    for (let i = 0; i < L; i++) s[i]._add(this);\n  }\n\n  _stop(): void {\n    const s = this.insArr;\n    const L = s.length;\n    for (let i = 0; i < L; i++) s[i]._remove(this);\n    this.out = NO as Stream<T>;\n  }\n\n  _n(t: T) {\n    const u = this.out;\n    if (u === NO) return;\n    u._n(t);\n  }\n\n  _e(err: any) {\n    const u = this.out;\n    if (u === NO) return;\n    u._e(err);\n  }\n\n  _c() {\n    if (--this.ac <= 0) {\n      const u = this.out;\n      if (u === NO) return;\n      u._c();\n    }\n  }\n}\n\nexport interface CombineSignature {\n  (): Stream<Array<any>>;\n  <T1>(s1: Stream<T1>): Stream<[T1]>;\n  <T1, T2>(\n    s1: Stream<T1>,\n    s2: Stream<T2>): Stream<[T1, T2]>;\n  <T1, T2, T3>(\n    s1: Stream<T1>,\n    s2: Stream<T2>,\n    s3: Stream<T3>): Stream<[T1, T2, T3]>;\n  <T1, T2, T3, T4>(\n    s1: Stream<T1>,\n    s2: Stream<T2>,\n    s3: Stream<T3>,\n    s4: Stream<T4>): Stream<[T1, T2, T3, T4]>;\n  <T1, T2, T3, T4, T5>(\n    s1: Stream<T1>,\n    s2: Stream<T2>,\n    s3: Stream<T3>,\n    s4: Stream<T4>,\n    s5: Stream<T5>): Stream<[T1, T2, T3, T4, T5]>;\n  <T1, T2, T3, T4, T5, T6>(\n    s1: Stream<T1>,\n    s2: Stream<T2>,\n    s3: Stream<T3>,\n    s4: Stream<T4>,\n    s5: Stream<T5>,\n    s6: Stream<T6>): Stream<[T1, T2, T3, T4, T5, T6]>;\n  <T1, T2, T3, T4, T5, T6, T7>(\n    s1: Stream<T1>,\n    s2: Stream<T2>,\n    s3: Stream<T3>,\n    s4: Stream<T4>,\n    s5: Stream<T5>,\n    s6: Stream<T6>,\n    s7: Stream<T7>): Stream<[T1, T2, T3, T4, T5, T6, T7]>;\n  <T1, T2, T3, T4, T5, T6, T7, T8>(\n    s1: Stream<T1>,\n    s2: Stream<T2>,\n    s3: Stream<T3>,\n    s4: Stream<T4>,\n    s5: Stream<T5>,\n    s6: Stream<T6>,\n    s7: Stream<T7>,\n    s8: Stream<T8>): Stream<[T1, T2, T3, T4, T5, T6, T7, T8]>;\n  <T1, T2, T3, T4, T5, T6, T7, T8, T9>(\n    s1: Stream<T1>,\n    s2: Stream<T2>,\n    s3: Stream<T3>,\n    s4: Stream<T4>,\n    s5: Stream<T5>,\n    s6: Stream<T6>,\n    s7: Stream<T7>,\n    s8: Stream<T8>,\n    s9: Stream<T9>): Stream<[T1, T2, T3, T4, T5, T6, T7, T8, T9]>;\n  <T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>(\n    s1: Stream<T1>,\n    s2: Stream<T2>,\n    s3: Stream<T3>,\n    s4: Stream<T4>,\n    s5: Stream<T5>,\n    s6: Stream<T6>,\n    s7: Stream<T7>,\n    s8: Stream<T8>,\n    s9: Stream<T9>,\n    s10: Stream<T10>): Stream<[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10]>;\n  <T>(...stream: Array<Stream<T>>): Stream<Array<T>>;\n  (...stream: Array<Stream<any>>): Stream<Array<any>>;\n}\n\nclass CombineListener<T> implements InternalListener<T>, OutSender<Array<T>> {\n  private i: number;\n  public out: Stream<Array<T>>;\n  private p: Combine<T>;\n\n  constructor(i: number, out: Stream<Array<T>>, p: Combine<T>) {\n    this.i = i;\n    this.out = out;\n    this.p = p;\n    p.ils.push(this);\n  }\n\n  _n(t: T): void {\n    const p = this.p, out = this.out;\n    if (out === NO) return;\n    if (p.up(t, this.i)) {\n      const b = cp(p.vals);\n      out._n(b);\n    }\n  }\n\n  _e(err: any): void {\n    const out = this.out;\n    if (out === NO) return;\n    out._e(err);\n  }\n\n  _c(): void {\n    const p = this.p;\n    if (p.out === NO) return;\n    if (--p.Nc === 0) p.out._c();\n  }\n}\n\nclass Combine<R> implements Aggregator<any, Array<R>> {\n  public type = 'combine';\n  public insArr: Array<Stream<any>>;\n  public out: Stream<Array<R>>;\n  public ils: Array<CombineListener<any>>;\n  public Nc: number; // *N*umber of streams still to send *c*omplete\n  public Nn: number; // *N*umber of streams still to send *n*ext\n  public vals: Array<R>;\n\n  constructor(insArr: Array<Stream<any>>) {\n    this.insArr = insArr;\n    this.out = NO as Stream<Array<R>>;\n    this.ils = [];\n    this.Nc = this.Nn = 0;\n    this.vals = [];\n  }\n\n  up(t: any, i: number): boolean {\n    const v = this.vals[i];\n    const Nn = !this.Nn ? 0 : v === NO ? --this.Nn : this.Nn;\n    this.vals[i] = t;\n    return Nn === 0;\n  }\n\n  _start(out: Stream<Array<R>>): void {\n    this.out = out;\n    const s = this.insArr;\n    const n = this.Nc = this.Nn = s.length;\n    const vals = this.vals = new Array(n);\n    if (n === 0) {\n      out._n([]);\n      out._c();\n    } else {\n      for (let i = 0; i < n; i++) {\n        vals[i] = NO;\n        s[i]._add(new CombineListener(i, out, this));\n      }\n    }\n  }\n\n  _stop(): void {\n    const s = this.insArr;\n    const n = s.length;\n    const ils = this.ils;\n    for (let i = 0; i < n; i++) s[i]._remove(ils[i]);\n    this.out = NO as Stream<Array<R>>;\n    this.ils = [];\n    this.vals = [];\n  }\n}\n\nclass FromArray<T> implements InternalProducer<T> {\n  public type = 'fromArray';\n  public a: Array<T>;\n\n  constructor(a: Array<T>) {\n    this.a = a;\n  }\n\n  _start(out: InternalListener<T>): void {\n    const a = this.a;\n    for (let i = 0, n = a.length; i < n; i++) out._n(a[i]);\n    out._c();\n  }\n\n  _stop(): void {\n  }\n}\n\nclass FromPromise<T> implements InternalProducer<T> {\n  public type = 'fromPromise';\n  public on: boolean;\n  public p: PromiseLike<T>;\n\n  constructor(p: PromiseLike<T>) {\n    this.on = false;\n    this.p = p;\n  }\n\n  _start(out: InternalListener<T>): void {\n    const prod = this;\n    this.on = true;\n    this.p.then(\n      (v: T) => {\n        if (prod.on) {\n          out._n(v);\n          out._c();\n        }\n      },\n      (e: any) => {\n        out._e(e);\n      },\n    ).then(noop, (err: any) => {\n      setTimeout(() => { throw err; });\n    });\n  }\n\n  _stop(): void {\n    this.on = false;\n  }\n}\n\nclass Periodic implements InternalProducer<number> {\n  public type = 'periodic';\n  public period: number;\n  private intervalID: any;\n  private i: number;\n\n  constructor(period: number) {\n    this.period = period;\n    this.intervalID = -1;\n    this.i = 0;\n  }\n\n  _start(out: InternalListener<number>): void {\n    const self = this;\n    function intervalHandler() { out._n(self.i++); }\n    this.intervalID = setInterval(intervalHandler, this.period);\n  }\n\n  _stop(): void {\n    if (this.intervalID !== -1) clearInterval(this.intervalID);\n    this.intervalID = -1;\n    this.i = 0;\n  }\n}\n\nclass Debug<T> implements Operator<T, T> {\n  public type = 'debug';\n  public ins: Stream<T>;\n  public out: Stream<T>;\n  private s: (t: T) => any; // spy\n  private l: string; // label\n\n  constructor(ins: Stream<T>);\n  constructor(ins: Stream<T>, arg?: string);\n  constructor(ins: Stream<T>, arg?: (t: T) => any);\n  constructor(ins: Stream<T>, arg?: string | ((t: T) => any));\n  constructor(ins: Stream<T>, arg?: string | ((t: T) => any) | undefined) {\n    this.ins = ins;\n    this.out = NO as Stream<T>;\n    this.s = noop;\n    this.l = '';\n    if (typeof arg === 'string') this.l = arg; else if (typeof arg === 'function') this.s = arg;\n  }\n\n  _start(out: Stream<T>): void {\n    this.out = out;\n    this.ins._add(this);\n  }\n\n  _stop(): void {\n    this.ins._remove(this);\n    this.out = NO as Stream<T>;\n  }\n\n  _n(t: T) {\n    const u = this.out;\n    if (u === NO) return;\n    const s = this.s, l = this.l;\n    if (s !== noop) {\n      try {\n        s(t);\n      } catch (e) {\n        u._e(e);\n      }\n    } else if (l) console.log(l + ':', t); else console.log(t);\n    u._n(t);\n  }\n\n  _e(err: any) {\n    const u = this.out;\n    if (u === NO) return;\n    u._e(err);\n  }\n\n  _c() {\n    const u = this.out;\n    if (u === NO) return;\n    u._c();\n  }\n}\n\nclass Drop<T> implements Operator<T, T> {\n  public type = 'drop';\n  public ins: Stream<T>;\n  public out: Stream<T>;\n  public max: number;\n  private dropped: number;\n\n  constructor(max: number, ins: Stream<T>) {\n    this.ins = ins;\n    this.out = NO as Stream<T>;\n    this.max = max;\n    this.dropped = 0;\n  }\n\n  _start(out: Stream<T>): void {\n    this.out = out;\n    this.dropped = 0;\n    this.ins._add(this);\n  }\n\n  _stop(): void {\n    this.ins._remove(this);\n    this.out = NO as Stream<T>;\n  }\n\n  _n(t: T) {\n    const u = this.out;\n    if (u === NO) return;\n    if (this.dropped++ >= this.max) u._n(t);\n  }\n\n  _e(err: any) {\n    const u = this.out;\n    if (u === NO) return;\n    u._e(err);\n  }\n\n  _c() {\n    const u = this.out;\n    if (u === NO) return;\n    u._c();\n  }\n}\n\nclass EndWhenListener<T> implements InternalListener<any> {\n  private out: Stream<T>;\n  private op: EndWhen<T>;\n\n  constructor(out: Stream<T>, op: EndWhen<T>) {\n    this.out = out;\n    this.op = op;\n  }\n\n  _n() {\n    this.op.end();\n  }\n\n  _e(err: any) {\n    this.out._e(err);\n  }\n\n  _c() {\n    this.op.end();\n  }\n}\n\nclass EndWhen<T> implements Operator<T, T> {\n  public type = 'endWhen';\n  public ins: Stream<T>;\n  public out: Stream<T>;\n  public o: Stream<any>; // o = other\n  private oil: InternalListener<any>; // oil = other InternalListener\n\n  constructor(o: Stream<any>, ins: Stream<T>) {\n    this.ins = ins;\n    this.out = NO as Stream<T>;\n    this.o = o;\n    this.oil = NO_IL;\n  }\n\n  _start(out: Stream<T>): void {\n    this.out = out;\n    this.o._add(this.oil = new EndWhenListener(out, this));\n    this.ins._add(this);\n  }\n\n  _stop(): void {\n    this.ins._remove(this);\n    this.o._remove(this.oil);\n    this.out = NO as Stream<T>;\n    this.oil = NO_IL;\n  }\n\n  end(): void {\n    const u = this.out;\n    if (u === NO) return;\n    u._c();\n  }\n\n  _n(t: T) {\n    const u = this.out;\n    if (u === NO) return;\n    u._n(t);\n  }\n\n  _e(err: any) {\n    const u = this.out;\n    if (u === NO) return;\n    u._e(err);\n  }\n\n  _c() {\n    this.end();\n  }\n}\n\nclass Filter<T> implements Operator<T, T> {\n  public type = 'filter';\n  public ins: Stream<T>;\n  public out: Stream<T>;\n  public f: (t: T) => boolean;\n\n  constructor(passes: (t: T) => boolean, ins: Stream<T>) {\n    this.ins = ins;\n    this.out = NO as Stream<T>;\n    this.f = passes;\n  }\n\n  _start(out: Stream<T>): void {\n    this.out = out;\n    this.ins._add(this);\n  }\n\n  _stop(): void {\n    this.ins._remove(this);\n    this.out = NO as Stream<T>;\n  }\n\n  _n(t: T) {\n    const u = this.out;\n    if (u === NO) return;\n    const r = _try(this, t, u);\n    if (r === NO || !r) return;\n    u._n(t);\n  }\n\n  _e(err: any) {\n    const u = this.out;\n    if (u === NO) return;\n    u._e(err);\n  }\n\n  _c() {\n    const u = this.out;\n    if (u === NO) return;\n    u._c();\n  }\n}\n\nclass FlattenListener<T> implements InternalListener<T> {\n  private out: Stream<T>;\n  private op: Flatten<T>;\n\n  constructor(out: Stream<T>, op: Flatten<T>) {\n    this.out = out;\n    this.op = op;\n  }\n\n  _n(t: T) {\n    this.out._n(t);\n  }\n\n  _e(err: any) {\n    this.out._e(err);\n  }\n\n  _c() {\n    this.op.inner = NO as Stream<T>;\n    this.op.less();\n  }\n}\n\nclass Flatten<T> implements Operator<Stream<T>, T> {\n  public type = 'flatten';\n  public ins: Stream<Stream<T>>;\n  public out: Stream<T>;\n  private open: boolean;\n  public inner: Stream<T>; // Current inner Stream\n  private il: InternalListener<T>; // Current inner InternalListener\n\n  constructor(ins: Stream<Stream<T>>) {\n    this.ins = ins;\n    this.out = NO as Stream<T>;\n    this.open = true;\n    this.inner = NO as Stream<T>;\n    this.il = NO_IL;\n  }\n\n  _start(out: Stream<T>): void {\n    this.out = out;\n    this.open = true;\n    this.inner = NO as Stream<T>;\n    this.il = NO_IL;\n    this.ins._add(this);\n  }\n\n  _stop(): void {\n    this.ins._remove(this);\n    if (this.inner !== NO) this.inner._remove(this.il);\n    this.out = NO as Stream<T>;\n    this.open = true;\n    this.inner = NO as Stream<T>;\n    this.il = NO_IL;\n  }\n\n  less(): void {\n    const u = this.out;\n    if (u === NO) return;\n    if (!this.open && this.inner === NO) u._c();\n  }\n\n  _n(s: Stream<T>) {\n    const u = this.out;\n    if (u === NO) return;\n    const { inner, il } = this;\n    if (inner !== NO && il !== NO_IL) inner._remove(il);\n    (this.inner = s)._add(this.il = new FlattenListener(u, this));\n  }\n\n  _e(err: any) {\n    const u = this.out;\n    if (u === NO) return;\n    u._e(err);\n  }\n\n  _c() {\n    this.open = false;\n    this.less();\n  }\n}\n\nclass Fold<T, R> implements Operator<T, R> {\n  public type = 'fold';\n  public ins: Stream<T>;\n  public out: Stream<R>;\n  public f: (t: T) => R;\n  public seed: R;\n  private acc: R; // initialized as seed\n\n  constructor(f: (acc: R, t: T) => R, seed: R, ins: Stream<T>) {\n    this.ins = ins;\n    this.out = NO as Stream<R>;\n    this.f = (t: T) => f(this.acc, t);\n    this.acc = this.seed = seed;\n  }\n\n  _start(out: Stream<R>): void {\n    this.out = out;\n    this.acc = this.seed;\n    out._n(this.acc);\n    this.ins._add(this);\n  }\n\n  _stop(): void {\n    this.ins._remove(this);\n    this.out = NO as Stream<R>;\n    this.acc = this.seed;\n  }\n\n  _n(t: T) {\n    const u = this.out;\n    if (u === NO) return;\n    const r = _try(this, t, u);\n    if (r === NO) return;\n    u._n(this.acc = r as R);\n  }\n\n  _e(err: any) {\n    const u = this.out;\n    if (u === NO) return;\n    u._e(err);\n  }\n\n  _c() {\n    const u = this.out;\n    if (u === NO) return;\n    u._c();\n  }\n}\n\nclass Last<T> implements Operator<T, T> {\n  public type = 'last';\n  public ins: Stream<T>;\n  public out: Stream<T>;\n  private has: boolean;\n  private val: T;\n\n  constructor(ins: Stream<T>) {\n    this.ins = ins;\n    this.out = NO as Stream<T>;\n    this.has = false;\n    this.val = NO as T;\n  }\n\n  _start(out: Stream<T>): void {\n    this.out = out;\n    this.has = false;\n    this.ins._add(this);\n  }\n\n  _stop(): void {\n    this.ins._remove(this);\n    this.out = NO as Stream<T>;\n    this.val = NO as T;\n  }\n\n  _n(t: T) {\n    this.has = true;\n    this.val = t;\n  }\n\n  _e(err: any) {\n    const u = this.out;\n    if (u === NO) return;\n    u._e(err);\n  }\n\n  _c() {\n    const u = this.out;\n    if (u === NO) return;\n    if (this.has) {\n      u._n(this.val);\n      u._c();\n    } else u._e(new Error('last() failed because input stream completed'));\n  }\n}\n\nclass MapOp<T, R> implements Operator<T, R> {\n  public type = 'map';\n  public ins: Stream<T>;\n  public out: Stream<R>;\n  public f: (t: T) => R;\n\n  constructor(project: (t: T) => R, ins: Stream<T>) {\n    this.ins = ins;\n    this.out = NO as Stream<R>;\n    this.f = project;\n  }\n\n  _start(out: Stream<R>): void {\n    this.out = out;\n    this.ins._add(this);\n  }\n\n  _stop(): void {\n    this.ins._remove(this);\n    this.out = NO as Stream<R>;\n  }\n\n  _n(t: T) {\n    const u = this.out;\n    if (u === NO) return;\n    const r = _try(this, t, u);\n    if (r === NO) return;\n    u._n(r as R);\n  }\n\n  _e(err: any) {\n    const u = this.out;\n    if (u === NO) return;\n    u._e(err);\n  }\n\n  _c() {\n    const u = this.out;\n    if (u === NO) return;\n    u._c();\n  }\n}\n\nclass Remember<T> implements InternalProducer<T> {\n  public type = 'remember';\n  public ins: Stream<T>;\n  public out: Stream<T>;\n\n  constructor(ins: Stream<T>) {\n    this.ins = ins;\n    this.out = NO as Stream<T>;\n  }\n\n  _start(out: Stream<T>): void {\n    this.out = out;\n    this.ins._add(out);\n  }\n\n  _stop(): void {\n    this.ins._remove(this.out);\n    this.out = NO as Stream<T>;\n  }\n}\n\nclass ReplaceError<T> implements Operator<T, T> {\n  public type = 'replaceError';\n  public ins: Stream<T>;\n  public out: Stream<T>;\n  public f: (err: any) => Stream<T>;\n\n  constructor(replacer: (err: any) => Stream<T>, ins: Stream<T>) {\n    this.ins = ins;\n    this.out = NO as Stream<T>;\n    this.f = replacer;\n  }\n\n  _start(out: Stream<T>): void {\n    this.out = out;\n    this.ins._add(this);\n  }\n\n  _stop(): void {\n    this.ins._remove(this);\n    this.out = NO as Stream<T>;\n  }\n\n  _n(t: T) {\n    const u = this.out;\n    if (u === NO) return;\n    u._n(t);\n  }\n\n  _e(err: any) {\n    const u = this.out;\n    if (u === NO) return;\n    try {\n      this.ins._remove(this);\n      (this.ins = this.f(err))._add(this);\n    } catch (e) {\n      u._e(e);\n    }\n  }\n\n  _c() {\n    const u = this.out;\n    if (u === NO) return;\n    u._c();\n  }\n}\n\nclass StartWith<T> implements InternalProducer<T> {\n  public type = 'startWith';\n  public ins: Stream<T>;\n  public out: Stream<T>;\n  public val: T;\n\n  constructor(ins: Stream<T>, val: T) {\n    this.ins = ins;\n    this.out = NO as Stream<T>;\n    this.val = val;\n  }\n\n  _start(out: Stream<T>): void {\n    this.out = out;\n    this.out._n(this.val);\n    this.ins._add(out);\n  }\n\n  _stop(): void {\n    this.ins._remove(this.out);\n    this.out = NO as Stream<T>;\n  }\n}\n\nclass Take<T> implements Operator<T, T> {\n  public type = 'take';\n  public ins: Stream<T>;\n  public out: Stream<T>;\n  public max: number;\n  private taken: number;\n\n  constructor(max: number, ins: Stream<T>) {\n    this.ins = ins;\n    this.out = NO as Stream<T>;\n    this.max = max;\n    this.taken = 0;\n  }\n\n  _start(out: Stream<T>): void {\n    this.out = out;\n    this.taken = 0;\n    if (this.max <= 0) out._c(); else this.ins._add(this);\n  }\n\n  _stop(): void {\n    this.ins._remove(this);\n    this.out = NO as Stream<T>;\n  }\n\n  _n(t: T) {\n    const u = this.out;\n    if (u === NO) return;\n    const m = ++this.taken;\n    if (m < this.max) u._n(t); else if (m === this.max) {\n      u._n(t);\n      u._c();\n    }\n  }\n\n  _e(err: any) {\n    const u = this.out;\n    if (u === NO) return;\n    u._e(err);\n  }\n\n  _c() {\n    const u = this.out;\n    if (u === NO) return;\n    u._c();\n  }\n}\n\nexport class Stream<T> implements InternalListener<T> {\n  public _prod: InternalProducer<T>;\n  protected _ils: Array<InternalListener<T>>; // 'ils' = Internal listeners\n  protected _stopID: any;\n  protected _dl: InternalListener<T>; // the debug listener\n  protected _d: boolean; // flag indicating the existence of the debug listener\n  protected _target: Stream<T> | null; // imitation target if this Stream will imitate\n  protected _err: any;\n\n  constructor(producer?: InternalProducer<T>) {\n    this._prod = producer || NO as InternalProducer<T>;\n    this._ils = [];\n    this._stopID = NO;\n    this._dl = NO as InternalListener<T>;\n    this._d = false;\n    this._target = null;\n    this._err = NO;\n  }\n\n  _n(t: T): void {\n    const a = this._ils;\n    const L = a.length;\n    if (this._d) this._dl._n(t);\n    if (L == 1) a[0]._n(t); else if (L == 0) return; else {\n      const b = cp(a);\n      for (let i = 0; i < L; i++) b[i]._n(t);\n    }\n  }\n\n  _e(err: any): void {\n    if (this._err !== NO) return;\n    this._err = err;\n    const a = this._ils;\n    const L = a.length;\n    this._x();\n    if (this._d) this._dl._e(err);\n    if (L == 1) a[0]._e(err); else if (L == 0) return; else {\n      const b = cp(a);\n      for (let i = 0; i < L; i++) b[i]._e(err);\n    }\n    if (!this._d && L == 0) throw this._err;\n  }\n\n  _c(): void {\n    const a = this._ils;\n    const L = a.length;\n    this._x();\n    if (this._d) this._dl._c();\n    if (L == 1) a[0]._c(); else if (L == 0) return; else {\n      const b = cp(a);\n      for (let i = 0; i < L; i++) b[i]._c();\n    }\n  }\n\n  _x(): void { // tear down logic, after error or complete\n    if (this._ils.length === 0) return;\n    if (this._prod !== NO) this._prod._stop();\n    this._err = NO;\n    this._ils = [];\n  }\n\n  _stopNow() {\n    // WARNING: code that calls this method should\n    // first check if this._prod is valid (not `NO`)\n    this._prod._stop();\n    this._err = NO;\n    this._stopID = NO;\n  }\n\n  _add(il: InternalListener<T>): void {\n    const ta = this._target;\n    if (ta) return ta._add(il);\n    const a = this._ils;\n    a.push(il);\n    if (a.length > 1) return;\n    if (this._stopID !== NO) {\n      clearTimeout(this._stopID);\n      this._stopID = NO;\n    } else {\n      const p = this._prod;\n      if (p !== NO) p._start(this);\n    }\n  }\n\n  _remove(il: InternalListener<T>): void {\n    const ta = this._target;\n    if (ta) return ta._remove(il);\n    const a = this._ils;\n    const i = a.indexOf(il);\n    if (i > -1) {\n      a.splice(i, 1);\n      if (this._prod !== NO && a.length <= 0) {\n        this._err = NO;\n        this._stopID = setTimeout(() => this._stopNow());\n      } else if (a.length === 1) {\n        this._pruneCycles();\n      }\n    }\n  }\n\n  // If all paths stemming from `this` stream eventually end at `this`\n  // stream, then we remove the single listener of `this` stream, to\n  // force it to end its execution and dispose resources. This method\n  // assumes as a precondition that this._ils has just one listener.\n  _pruneCycles() {\n    if (this._hasNoSinks(this, [])) this._remove(this._ils[0]);\n  }\n\n  // Checks whether *there is no* path starting from `x` that leads to an end\n  // listener (sink) in the stream graph, following edges A->B where B is a\n  // listener of A. This means these paths constitute a cycle somehow. Is given\n  // a trace of all visited nodes so far.\n  _hasNoSinks(x: InternalListener<any>, trace: Array<any>): boolean {\n    if (trace.indexOf(x) !== -1)\n      return true; else\n      if ((x as any as OutSender<any>).out === this)\n        return true; else\n        if ((x as any as OutSender<any>).out && (x as any as OutSender<any>).out !== NO)\n          return this._hasNoSinks((x as any as OutSender<any>).out, trace.concat(x)); else\n          if ((x as Stream<any>)._ils) {\n            for (let i = 0, N = (x as Stream<any>)._ils.length; i < N; i++)\n              if (!this._hasNoSinks((x as Stream<any>)._ils[i], trace.concat(x)))\n                return false;\n            return true;\n          } else return false;\n  }\n\n  private ctor(): typeof Stream {\n    return this instanceof MemoryStream ? MemoryStream : Stream;\n  }\n\n  /**\n   * Adds a Listener to the Stream.\n   *\n   * @param {Listener} listener\n   */\n  addListener(listener: Partial<Listener<T>>): void {\n    (listener as InternalListener<T>)._n = listener.next || noop;\n    (listener as InternalListener<T>)._e = listener.error || noop;\n    (listener as InternalListener<T>)._c = listener.complete || noop;\n    this._add(listener as InternalListener<T>);\n  }\n\n  /**\n   * Removes a Listener from the Stream, assuming the Listener was added to it.\n   *\n   * @param {Listener<T>} listener\n   */\n  removeListener(listener: Partial<Listener<T>>): void {\n    this._remove(listener as InternalListener<T>);\n  }\n\n  /**\n   * Adds a Listener to the Stream returning a Subscription to remove that\n   * listener.\n   *\n   * @param {Listener} listener\n   * @returns {Subscription}\n   */\n  subscribe(listener: Partial<Listener<T>>): Subscription {\n    this.addListener(listener);\n    return new StreamSub<T>(this, listener as InternalListener<T>);\n  }\n\n  /**\n   * Add interop between most.js and RxJS 5\n   *\n   * @returns {Stream}\n   */\n  [$$observable](): Stream<T> {\n    return this;\n  }\n\n  /**\n   * Creates a new Stream given a Producer.\n   *\n   * @factory true\n   * @param {Producer} producer An optional Producer that dictates how to\n   * start, generate events, and stop the Stream.\n   * @return {Stream}\n   */\n  static create<T>(producer?: Producer<T>): Stream<T> {\n    if (producer) {\n      if (typeof producer.start !== 'function'\n        || typeof producer.stop !== 'function')\n        throw new Error('producer requires both start and stop functions');\n      internalizeProducer(producer); // mutates the input\n    }\n    return new Stream(producer as InternalProducer<T> & Producer<T>);\n  }\n\n  /**\n   * Creates a new MemoryStream given a Producer.\n   *\n   * @factory true\n   * @param {Producer} producer An optional Producer that dictates how to\n   * start, generate events, and stop the Stream.\n   * @return {MemoryStream}\n   */\n  static createWithMemory<T>(producer?: Producer<T>): MemoryStream<T> {\n    if (producer) internalizeProducer(producer); // mutates the input\n    return new MemoryStream<T>(producer as InternalProducer<T> & Producer<T>);\n  }\n\n  /**\n   * Creates a Stream that does nothing when started. It never emits any event.\n   *\n   * Marble diagram:\n   *\n   * ```text\n   *          never\n   * -----------------------\n   * ```\n   *\n   * @factory true\n   * @return {Stream}\n   */\n  static never<T = any>(): Stream<T> {\n    return new Stream<T>({ _start: noop, _stop: noop });\n  }\n\n  /**\n   * Creates a Stream that immediately emits the \"complete\" notification when\n   * started, and that's it.\n   *\n   * Marble diagram:\n   *\n   * ```text\n   * empty\n   * -|\n   * ```\n   *\n   * @factory true\n   * @return {Stream}\n   */\n  static empty<T = any>(): Stream<T> {\n    return new Stream<T>({\n      _start(il: InternalListener<any>) { il._c(); },\n      _stop: noop,\n    });\n  }\n\n  /**\n   * Creates a Stream that immediately emits an \"error\" notification with the\n   * value you passed as the `error` argument when the stream starts, and that's\n   * it.\n   *\n   * Marble diagram:\n   *\n   * ```text\n   * throw(X)\n   * -X\n   * ```\n   *\n   * @factory true\n   * @param error The error event to emit on the created stream.\n   * @return {Stream}\n   */\n  static throw(error: any): Stream<any> {\n    return new Stream<any>({\n      _start(il: InternalListener<any>) { il._e(error); },\n      _stop: noop,\n    });\n  }\n\n  /**\n   * Creates a stream from an Array, Promise, or an Observable.\n   *\n   * @factory true\n   * @param {Array|PromiseLike|Observable} input The input to make a stream from.\n   * @return {Stream}\n   */\n  static from<T>(input: PromiseLike<T> | Stream<T> | Array<T> | Observable<T>): Stream<T> {\n    if (typeof input[$$observable] === 'function')\n      return Stream.fromObservable<T>(input as Observable<T>); else\n      if (typeof (input as PromiseLike<T>).then === 'function')\n        return Stream.fromPromise<T>(input as PromiseLike<T>); else\n        if (Array.isArray(input))\n          return Stream.fromArray<T>(input);\n\n    throw new TypeError(`Type of input to from() must be an Array, Promise, or Observable`);\n  }\n\n  /**\n   * Creates a Stream that immediately emits the arguments that you give to\n   * *of*, then completes.\n   *\n   * Marble diagram:\n   *\n   * ```text\n   * of(1,2,3)\n   * 123|\n   * ```\n   *\n   * @factory true\n   * @param a The first value you want to emit as an event on the stream.\n   * @param b The second value you want to emit as an event on the stream. One\n   * or more of these values may be given as arguments.\n   * @return {Stream}\n   */\n  static of<T>(...items: Array<T>): Stream<T> {\n    return Stream.fromArray<T>(items);\n  }\n\n  /**\n   * Converts an array to a stream. The returned stream will emit synchronously\n   * all the items in the array, and then complete.\n   *\n   * Marble diagram:\n   *\n   * ```text\n   * fromArray([1,2,3])\n   * 123|\n   * ```\n   *\n   * @factory true\n   * @param {Array} array The array to be converted as a stream.\n   * @return {Stream}\n   */\n  static fromArray<T>(array: Array<T>): Stream<T> {\n    return new Stream<T>(new FromArray<T>(array));\n  }\n\n  /**\n   * Converts a promise to a stream. The returned stream will emit the resolved\n   * value of the promise, and then complete. However, if the promise is\n   * rejected, the stream will emit the corresponding error.\n   *\n   * Marble diagram:\n   *\n   * ```text\n   * fromPromise( ----42 )\n   * -----------------42|\n   * ```\n   *\n   * @factory true\n   * @param {PromiseLike} promise The promise to be converted as a stream.\n   * @return {Stream}\n   */\n  static fromPromise<T>(promise: PromiseLike<T>): Stream<T> {\n    return new Stream<T>(new FromPromise<T>(promise));\n  }\n\n  /**\n   * Converts an Observable into a Stream.\n   *\n   * @factory true\n   * @param {any} observable The observable to be converted as a stream.\n   * @return {Stream}\n   */\n  static fromObservable<T>(obs: { subscribe: any }): Stream<T> {\n    if ((obs as Stream<T>).endWhen !== undefined) return obs as Stream<T>;\n    const o = typeof obs[$$observable] === 'function' ? obs[$$observable]() : obs;\n    return new Stream<T>(new FromObservable(o));\n  }\n\n  /**\n   * Creates a stream that periodically emits incremental numbers, every\n   * `period` milliseconds.\n   *\n   * Marble diagram:\n   *\n   * ```text\n   *     periodic(1000)\n   * ---0---1---2---3---4---...\n   * ```\n   *\n   * @factory true\n   * @param {number} period The interval in milliseconds to use as a rate of\n   * emission.\n   * @return {Stream}\n   */\n  static periodic(period: number): Stream<number> {\n    return new Stream<number>(new Periodic(period));\n  }\n\n  /**\n   * Blends multiple streams together, emitting events from all of them\n   * concurrently.\n   *\n   * *merge* takes multiple streams as arguments, and creates a stream that\n   * behaves like each of the argument streams, in parallel.\n   *\n   * Marble diagram:\n   *\n   * ```text\n   * --1----2-----3--------4---\n   * ----a-----b----c---d------\n   *            merge\n   * --1-a--2--b--3-c---d--4---\n   * ```\n   *\n   * @factory true\n   * @param {Stream} stream1 A stream to merge together with other streams.\n   * @param {Stream} stream2 A stream to merge together with other streams. Two\n   * or more streams may be given as arguments.\n   * @return {Stream}\n   */\n  static merge: MergeSignature = function merge(...streams: Array<Stream<any>>) {\n    return new Stream<any>(new Merge(streams));\n  } as MergeSignature;\n\n  /**\n   * Combines multiple input streams together to return a stream whose events\n   * are arrays that collect the latest events from each input stream.\n   *\n   * *combine* internally remembers the most recent event from each of the input\n   * streams. When any of the input streams emits an event, that event together\n   * with all the other saved events are combined into an array. That array will\n   * be emitted on the output stream. It's essentially a way of joining together\n   * the events from multiple streams.\n   *\n   * Marble diagram:\n   *\n   * ```text\n   * --1----2-----3--------4---\n   * ----a-----b-----c--d------\n   *          combine\n   * ----1a-2a-2b-3b-3c-3d-4d--\n   * ```\n   *\n   * @factory true\n   * @param {Stream} stream1 A stream to combine together with other streams.\n   * @param {Stream} stream2 A stream to combine together with other streams.\n   * Multiple streams, not just two, may be given as arguments.\n   * @return {Stream}\n   */\n  static combine: CombineSignature = function combine(...streams: Array<Stream<any>>) {\n    return new Stream<Array<any>>(new Combine<any>(streams));\n  } as CombineSignature;\n\n  protected _map<U>(project: (t: T) => U): Stream<U> | MemoryStream<U> {\n    return new (this.ctor())<U>(new MapOp<T, U>(project, this));\n  }\n\n  /**\n   * Transforms each event from the input Stream through a `project` function,\n   * to get a Stream that emits those transformed events.\n   *\n   * Marble diagram:\n   *\n   * ```text\n   * --1---3--5-----7------\n   *    map(i => i * 10)\n   * --10--30-50----70-----\n   * ```\n   *\n   * @param {Function} project A function of type `(t: T) => U` that takes event\n   * `t` of type `T` from the input Stream and produces an event of type `U`, to\n   * be emitted on the output Stream.\n   * @return {Stream}\n   */\n  map<U>(project: (t: T) => U): Stream<U> {\n    return this._map(project);\n  }\n\n  /**\n   * It's like `map`, but transforms each input event to always the same\n   * constant value on the output Stream.\n   *\n   * Marble diagram:\n   *\n   * ```text\n   * --1---3--5-----7-----\n   *       mapTo(10)\n   * --10--10-10----10----\n   * ```\n   *\n   * @param projectedValue A value to emit on the output Stream whenever the\n   * input Stream emits any value.\n   * @return {Stream}\n   */\n  mapTo<U>(projectedValue: U): Stream<U> {\n    const s = this.map(() => projectedValue);\n    const op: Operator<T, U> = s._prod as Operator<T, U>;\n    op.type = 'mapTo';\n    return s;\n  }\n\n  filter<S extends T>(passes: (t: T) => t is S): Stream<S>;\n  filter(passes: (t: T) => boolean): Stream<T>;\n  /**\n   * Only allows events that pass the test given by the `passes` argument.\n   *\n   * Each event from the input stream is given to the `passes` function. If the\n   * function returns `true`, the event is forwarded to the output stream,\n   * otherwise it is ignored and not forwarded.\n   *\n   * Marble diagram:\n   *\n   * ```text\n   * --1---2--3-----4-----5---6--7-8--\n   *     filter(i => i % 2 === 0)\n   * ------2--------4---------6----8--\n   * ```\n   *\n   * @param {Function} passes A function of type `(t: T) => boolean` that takes\n   * an event from the input stream and checks if it passes, by returning a\n   * boolean.\n   * @return {Stream}\n   */\n  filter(passes: (t: T) => boolean): Stream<T> {\n    const p = this._prod;\n    if (p instanceof Filter)\n      return new Stream<T>(new Filter<T>(\n        and((p as Filter<T>).f, passes),\n        (p as Filter<T>).ins\n      ));\n    return new Stream<T>(new Filter<T>(passes, this));\n  }\n\n  /**\n   * Lets the first `amount` many events from the input stream pass to the\n   * output stream, then makes the output stream complete.\n   *\n   * Marble diagram:\n   *\n   * ```text\n   * --a---b--c----d---e--\n   *    take(3)\n   * --a---b--c|\n   * ```\n   *\n   * @param {number} amount How many events to allow from the input stream\n   * before completing the output stream.\n   * @return {Stream}\n   */\n  take(amount: number): Stream<T> {\n    return new (this.ctor())<T>(new Take<T>(amount, this));\n  }\n\n  /**\n   * Ignores the first `amount` many events from the input stream, and then\n   * after that starts forwarding events from the input stream to the output\n   * stream.\n   *\n   * Marble diagram:\n   *\n   * ```text\n   * --a---b--c----d---e--\n   *       drop(3)\n   * --------------d---e--\n   * ```\n   *\n   * @param {number} amount How many events to ignore from the input stream\n   * before forwarding all events from the input stream to the output stream.\n   * @return {Stream}\n   */\n  drop(amount: number): Stream<T> {\n    return new Stream<T>(new Drop<T>(amount, this));\n  }\n\n  /**\n   * When the input stream completes, the output stream will emit the last event\n   * emitted by the input stream, and then will also complete.\n   *\n   * Marble diagram:\n   *\n   * ```text\n   * --a---b--c--d----|\n   *       last()\n   * -----------------d|\n   * ```\n   *\n   * @return {Stream}\n   */\n  last(): Stream<T> {\n    return new Stream<T>(new Last<T>(this));\n  }\n\n  /**\n   * Prepends the given `initial` value to the sequence of events emitted by the\n   * input stream. The returned stream is a MemoryStream, which means it is\n   * already `remember()`'d.\n   *\n   * Marble diagram:\n   *\n   * ```text\n   * ---1---2-----3---\n   *   startWith(0)\n   * 0--1---2-----3---\n   * ```\n   *\n   * @param initial The value or event to prepend.\n   * @return {MemoryStream}\n   */\n  startWith(initial: T): MemoryStream<T> {\n    return new MemoryStream<T>(new StartWith<T>(this, initial));\n  }\n\n  /**\n   * Uses another stream to determine when to complete the current stream.\n   *\n   * When the given `other` stream emits an event or completes, the output\n   * stream will complete. Before that happens, the output stream will behaves\n   * like the input stream.\n   *\n   * Marble diagram:\n   *\n   * ```text\n   * ---1---2-----3--4----5----6---\n   *   endWhen( --------a--b--| )\n   * ---1---2-----3--4--|\n   * ```\n   *\n   * @param other Some other stream that is used to know when should the output\n   * stream of this operator complete.\n   * @return {Stream}\n   */\n  endWhen(other: Stream<any>): Stream<T> {\n    return new (this.ctor())<T>(new EndWhen<T>(other, this));\n  }\n\n  /**\n   * \"Folds\" the stream onto itself.\n   *\n   * Combines events from the past throughout\n   * the entire execution of the input stream, allowing you to accumulate them\n   * together. It's essentially like `Array.prototype.reduce`. The returned\n   * stream is a MemoryStream, which means it is already `remember()`'d.\n   *\n   * The output stream starts by emitting the `seed` which you give as argument.\n   * Then, when an event happens on the input stream, it is combined with that\n   * seed value through the `accumulate` function, and the output value is\n   * emitted on the output stream. `fold` remembers that output value as `acc`\n   * (\"accumulator\"), and then when a new input event `t` happens, `acc` will be\n   * combined with that to produce the new `acc` and so forth.\n   *\n   * Marble diagram:\n   *\n   * ```text\n   * ------1-----1--2----1----1------\n   *   fold((acc, x) => acc + x, 3)\n   * 3-----4-----5--7----8----9------\n   * ```\n   *\n   * @param {Function} accumulate A function of type `(acc: R, t: T) => R` that\n   * takes the previous accumulated value `acc` and the incoming event from the\n   * input stream and produces the new accumulated value.\n   * @param seed The initial accumulated value, of type `R`.\n   * @return {MemoryStream}\n   */\n  fold<R>(accumulate: (acc: R, t: T) => R, seed: R): MemoryStream<R> {\n    return new MemoryStream<R>(new Fold<T, R>(accumulate, seed, this));\n  }\n\n  /**\n   * Replaces an error with another stream.\n   *\n   * When (and if) an error happens on the input stream, instead of forwarding\n   * that error to the output stream, *replaceError* will call the `replace`\n   * function which returns the stream that the output stream will replicate.\n   * And, in case that new stream also emits an error, `replace` will be called\n   * again to get another stream to start replicating.\n   *\n   * Marble diagram:\n   *\n   * ```text\n   * --1---2-----3--4-----X\n   *   replaceError( () => --10--| )\n   * --1---2-----3--4--------10--|\n   * ```\n   *\n   * @param {Function} replace A function of type `(err) => Stream` that takes\n   * the error that occurred on the input stream or on the previous replacement\n   * stream and returns a new stream. The output stream will behave like the\n   * stream that this function returns.\n   * @return {Stream}\n   */\n  replaceError(replace: (err: any) => Stream<T>): Stream<T> {\n    return new (this.ctor())<T>(new ReplaceError<T>(replace, this));\n  }\n\n  /**\n   * Flattens a \"stream of streams\", handling only one nested stream at a time\n   * (no concurrency).\n   *\n   * If the input stream is a stream that emits streams, then this operator will\n   * return an output stream which is a flat stream: emits regular events. The\n   * flattening happens without concurrency. It works like this: when the input\n   * stream emits a nested stream, *flatten* will start imitating that nested\n   * one. However, as soon as the next nested stream is emitted on the input\n   * stream, *flatten* will forget the previous nested one it was imitating, and\n   * will start imitating the new nested one.\n   *\n   * Marble diagram:\n   *\n   * ```text\n   * --+--------+---------------\n   *   \\        \\\n   *    \\       ----1----2---3--\n   *    --a--b----c----d--------\n   *           flatten\n   * -----a--b------1----2---3--\n   * ```\n   *\n   * @return {Stream}\n   */\n  flatten<R>(this: Stream<Stream<R> | MemoryStream<R>>): Stream<R> {\n    return new Stream<R>(new Flatten(this));\n  }\n\n  /**\n   * Passes the input stream to a custom operator, to produce an output stream.\n   *\n   * *compose* is a handy way of using an existing function in a chained style.\n   * Instead of writing `outStream = f(inStream)` you can write\n   * `outStream = inStream.compose(f)`.\n   *\n   * @param {function} operator A function that takes a stream as input and\n   * returns a stream as well.\n   * @return {Stream}\n   */\n  compose<U>(operator: (stream: Stream<T>) => U): U {\n    return operator(this);\n  }\n\n  /**\n   * Returns an output stream that behaves like the input stream, but also\n   * remembers the most recent event that happens on the input stream, so that a\n   * newly added listener will immediately receive that memorised event.\n   *\n   * @return {MemoryStream}\n   */\n  remember(): MemoryStream<T> {\n    return new MemoryStream<T>(new Remember<T>(this));\n  }\n\n  debug(): Stream<T>;\n  debug(labelOrSpy: string): Stream<T>;\n  debug(labelOrSpy: (t: T) => any): Stream<T>;\n  /**\n   * Returns an output stream that identically behaves like the input stream,\n   * but also runs a `spy` function for each event, to help you debug your app.\n   *\n   * *debug* takes a `spy` function as argument, and runs that for each event\n   * happening on the input stream. If you don't provide the `spy` argument,\n   * then *debug* will just `console.log` each event. This helps you to\n   * understand the flow of events through some operator chain.\n   *\n   * Please note that if the output stream has no listeners, then it will not\n   * start, which means `spy` will never run because no actual event happens in\n   * that case.\n   *\n   * Marble diagram:\n   *\n   * ```text\n   * --1----2-----3-----4--\n   *         debug\n   * --1----2-----3-----4--\n   * ```\n   *\n   * @param {function} labelOrSpy A string to use as the label when printing\n   * debug information on the console, or a 'spy' function that takes an event\n   * as argument, and does not need to return anything.\n   * @return {Stream}\n   */\n  debug(labelOrSpy?: string | ((t: T) => any)): Stream<T> {\n    return new (this.ctor())<T>(new Debug<T>(this, labelOrSpy));\n  }\n\n  /**\n   * *imitate* changes this current Stream to emit the same events that the\n   * `other` given Stream does. This method returns nothing.\n   *\n   * This method exists to allow one thing: **circular dependency of streams**.\n   * For instance, let's imagine that for some reason you need to create a\n   * circular dependency where stream `first$` depends on stream `second$`\n   * which in turn depends on `first$`:\n   *\n   * <!-- skip-example -->\n   * ```js\n   * import delay from 'xstream/extra/delay'\n   *\n   * var first$ = second$.map(x => x * 10).take(3);\n   * var second$ = first$.map(x => x + 1).startWith(1).compose(delay(100));\n   * ```\n   *\n   * However, that is invalid JavaScript, because `second$` is undefined\n   * on the first line. This is how *imitate* can help solve it:\n   *\n   * ```js\n   * import delay from 'xstream/extra/delay'\n   *\n   * var secondProxy$ = xs.create();\n   * var first$ = secondProxy$.map(x => x * 10).take(3);\n   * var second$ = first$.map(x => x + 1).startWith(1).compose(delay(100));\n   * secondProxy$.imitate(second$);\n   * ```\n   *\n   * We create `secondProxy$` before the others, so it can be used in the\n   * declaration of `first$`. Then, after both `first$` and `second$` are\n   * defined, we hook `secondProxy$` with `second$` with `imitate()` to tell\n   * that they are \"the same\". `imitate` will not trigger the start of any\n   * stream, it just binds `secondProxy$` and `second$` together.\n   *\n   * The following is an example where `imitate()` is important in Cycle.js\n   * applications. A parent component contains some child components. A child\n   * has an action stream which is given to the parent to define its state:\n   *\n   * <!-- skip-example -->\n   * ```js\n   * const childActionProxy$ = xs.create();\n   * const parent = Parent({...sources, childAction$: childActionProxy$});\n   * const childAction$ = parent.state$.map(s => s.child.action$).flatten();\n   * childActionProxy$.imitate(childAction$);\n   * ```\n   *\n   * Note, though, that **`imitate()` does not support MemoryStreams**. If we\n   * would attempt to imitate a MemoryStream in a circular dependency, we would\n   * either get a race condition (where the symptom would be \"nothing happens\")\n   * or an infinite cyclic emission of values. It's useful to think about\n   * MemoryStreams as cells in a spreadsheet. It doesn't make any sense to\n   * define a spreadsheet cell `A1` with a formula that depends on `B1` and\n   * cell `B1` defined with a formula that depends on `A1`.\n   *\n   * If you find yourself wanting to use `imitate()` with a\n   * MemoryStream, you should rework your code around `imitate()` to use a\n   * Stream instead. Look for the stream in the circular dependency that\n   * represents an event stream, and that would be a candidate for creating a\n   * proxy Stream which then imitates the target Stream.\n   *\n   * @param {Stream} target The other stream to imitate on the current one. Must\n   * not be a MemoryStream.\n   */\n  imitate(target: Stream<T>): void {\n    if (target instanceof MemoryStream)\n      throw new Error('A MemoryStream was given to imitate(), but it only ' +\n        'supports a Stream. Read more about this restriction here: ' +\n        'https://github.com/staltz/xstream#faq');\n    this._target = target;\n    for (let ils = this._ils, N = ils.length, i = 0; i < N; i++) target._add(ils[i]);\n    this._ils = [];\n  }\n\n  /**\n   * Forces the Stream to emit the given value to its listeners.\n   *\n   * As the name indicates, if you use this, you are most likely doing something\n   * The Wrong Way. Please try to understand the reactive way before using this\n   * method. Use it only when you know what you are doing.\n   *\n   * @param value The \"next\" value you want to broadcast to all listeners of\n   * this Stream.\n   */\n  shamefullySendNext(value: T) {\n    this._n(value);\n  }\n\n  /**\n   * Forces the Stream to emit the given error to its listeners.\n   *\n   * As the name indicates, if you use this, you are most likely doing something\n   * The Wrong Way. Please try to understand the reactive way before using this\n   * method. Use it only when you know what you are doing.\n   *\n   * @param {any} error The error you want to broadcast to all the listeners of\n   * this Stream.\n   */\n  shamefullySendError(error: any) {\n    this._e(error);\n  }\n\n  /**\n   * Forces the Stream to emit the \"completed\" event to its listeners.\n   *\n   * As the name indicates, if you use this, you are most likely doing something\n   * The Wrong Way. Please try to understand the reactive way before using this\n   * method. Use it only when you know what you are doing.\n   */\n  shamefullySendComplete() {\n    this._c();\n  }\n\n  /**\n   * Adds a \"debug\" listener to the stream. There can only be one debug\n   * listener, that's why this is 'setDebugListener'. To remove the debug\n   * listener, just call setDebugListener(null).\n   *\n   * A debug listener is like any other listener. The only difference is that a\n   * debug listener is \"stealthy\": its presence/absence does not trigger the\n   * start/stop of the stream (or the producer inside the stream). This is\n   * useful so you can inspect what is going on without changing the behavior\n   * of the program. If you have an idle stream and you add a normal listener to\n   * it, the stream will start executing. But if you set a debug listener on an\n   * idle stream, it won't start executing (not until the first normal listener\n   * is added).\n   *\n   * As the name indicates, we don't recommend using this method to build app\n   * logic. In fact, in most cases the debug operator works just fine. Only use\n   * this one if you know what you're doing.\n   *\n   * @param {Listener<T>} listener\n   */\n  setDebugListener(listener: Partial<Listener<T>> | null | undefined) {\n    if (!listener) {\n      this._d = false;\n      this._dl = NO as InternalListener<T>;\n    } else {\n      this._d = true;\n      (listener as InternalListener<T>)._n = listener.next || noop;\n      (listener as InternalListener<T>)._e = listener.error || noop;\n      (listener as InternalListener<T>)._c = listener.complete || noop;\n      this._dl = listener as InternalListener<T>;\n    }\n  }\n}\n\nexport class MemoryStream<T> extends Stream<T> {\n  private _v?: T;\n  private _has?: boolean = false;\n  constructor(producer: InternalProducer<T>) {\n    super(producer);\n  }\n\n  _n(x: T) {\n    this._v = x;\n    this._has = true;\n    super._n(x);\n  }\n\n  _add(il: InternalListener<T>): void {\n    const ta = this._target;\n    if (ta) return ta._add(il);\n    const a = this._ils;\n    a.push(il);\n    if (a.length > 1) {\n      if (this._has) il._n(this._v!);\n      return;\n    }\n    if (this._stopID !== NO) {\n      if (this._has) il._n(this._v!);\n      clearTimeout(this._stopID);\n      this._stopID = NO;\n    } else if (this._has) il._n(this._v!); else {\n      const p = this._prod;\n      if (p !== NO) p._start(this);\n    }\n  }\n\n  _stopNow() {\n    this._has = false;\n    super._stopNow();\n  }\n\n  _x(): void {\n    this._has = false;\n    super._x();\n  }\n\n  map<U>(project: (t: T) => U): MemoryStream<U> {\n    return this._map(project) as MemoryStream<U>;\n  }\n\n  mapTo<U>(projectedValue: U): MemoryStream<U> {\n    return super.mapTo(projectedValue) as MemoryStream<U>;\n  }\n\n  take(amount: number): MemoryStream<T> {\n    return super.take(amount) as MemoryStream<T>;\n  }\n\n  endWhen(other: Stream<any>): MemoryStream<T> {\n    return super.endWhen(other) as MemoryStream<T>;\n  }\n\n  replaceError(replace: (err: any) => Stream<T>): MemoryStream<T> {\n    return super.replaceError(replace) as MemoryStream<T>;\n  }\n\n  remember(): MemoryStream<T> {\n    return this;\n  }\n\n  debug(): MemoryStream<T>;\n  debug(labelOrSpy: string): MemoryStream<T>;\n  debug(labelOrSpy: (t: T) => any): MemoryStream<T>;\n  debug(labelOrSpy?: string | ((t: T) => any) | undefined): MemoryStream<T> {\n    return super.debug(labelOrSpy as any) as MemoryStream<T>;\n  }\n}\n\nexport { NO, NO_IL };\nconst xs = Stream;\ntype xs<T> = Stream<T>;\nexport default xs;\n", "// https://github.com/maxogden/websocket-stream/blob/48dc3ddf943e5ada668c31ccd94e9186f02fafbd/ws-fallback.js\n\nvar ws = null\n\nif (typeof WebSocket !== 'undefined') {\n  ws = WebSocket\n} else if (typeof MozWebSocket !== 'undefined') {\n  ws = MozWebSocket\n} else if (typeof global !== 'undefined') {\n  ws = global.WebSocket || global.MozWebSocket\n} else if (typeof window !== 'undefined') {\n  ws = window.WebSocket || window.MozWebSocket\n} else if (typeof self !== 'undefined') {\n  ws = self.WebSocket || self.MozWebSocket\n}\n\nmodule.exports = ws\n"],
  "mappings": "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",
  "names": ["require_ponyfill", "require_implementation", "concatty", "slicy", "Empty", "undefined", "doEval", "stringToPath", "getBaseIntrinsic", "hasPropertyDescriptors", "StreamSub", "Observer", "FromObservable", "Merge", "CombineListener", "Combine", "FromArray", "FromPromise", "Periodic", "self", "Debug", "Drop", "EndWhenListener", "EndWhen", "Filter", "FlattenListener", "Flatten", "Fold", "Last", "MapOp", "Remember", "ReplaceError", "StartWith", "Take", "Stream", "MemoryStream"]
}
