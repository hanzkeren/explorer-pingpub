import { AccountData, AminoSignResponse } from '@cosmjs/amino';
import { SignDoc } from 'cosmjs-types/cosmos/tx/v1beta1/tx';
import { ChainInfo, GetSnapsResponse, SignAminoOptions, Snap, StdSignDoc, SuggestChainOptions } from './types';
/**
 * Get the installed snaps in MetaMask.
 *
 * @returns The snaps installed in MetaMask.
 */
export declare const getSnaps: () => Promise<GetSnapsResponse>;
/**
 * Connect a snap to MetaMask.
 *
 * @param snapId - The ID of the snap.
 * @param params - The params to pass with the snap to connect.
 */
export declare const connectSnap: (snapId?: string, params?: Record<'version' | string, unknown>) => Promise<any>;
/**
 * Get the snap from MetaMask.
 *
 * @param version - The version of the snap to install (optional).
 * @returns The snap object returned by the extension.
 */
export declare const getSnap: (version?: string) => Promise<Snap | undefined>;
export declare const requestSignature: (chainId: string, signerAddress: string, signDoc: SignDoc) => Promise<{
    signature: any;
    signed: any;
}>;
export declare const requestSignAmino: (chainId: string, signerAddress: string, signDoc: StdSignDoc, options?: SignAminoOptions) => Promise<AminoSignResponse>;
export declare const getKey: (chainId: string) => Promise<AccountData>;
export declare const isLocalSnap: (snapId: string) => boolean;
export declare const suggestChain: (chainInfo: ChainInfo, options: SuggestChainOptions) => Promise<{
    message: string;
    chainInfo: ChainInfo;
}>;
export declare const experimentalSuggestChain: (chainInfo: ChainInfo, options: SuggestChainOptions) => Promise<{
    message: string;
    chainInfo: ChainInfo;
}>;
